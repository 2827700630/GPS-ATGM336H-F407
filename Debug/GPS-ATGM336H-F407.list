
GPS-ATGM336H-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800535c  0800535c  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005364  08005364  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005368  08005368  00006368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800536c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000004a0  20000060  20000060  00007060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000500  20000500  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009888  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6a  00000000  00000000  00010914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  00012580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005cd  00000000  00000000  00012d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002128b  00000000  00000000  000132fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae9a  00000000  00000000  00034588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c44e8  00000000  00000000  0003f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010390a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023c4  00000000  00000000  00103950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00105d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005220 	.word	0x08005220

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005220 	.word	0x08005220

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_DMA_Init+0x3c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <MX_DMA_Init+0x3c>)
 8000d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_DMA_Init+0x3c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	200c      	movs	r0, #12
 8000db0:	f001 fa39 	bl	8002226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000db4:	200c      	movs	r0, #12
 8000db6:	f001 fa52 	bl	800225e <HAL_NVIC_EnableIRQ>

}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a16      	ldr	r2, [pc, #88]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_GPIO_Init+0x68>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <prv_parse_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static int32_t
prv_parse_number(lwgps_t* ghandle, const char* text) {
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
    uint8_t minus = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	72fb      	strb	r3, [r7, #11]

    if (text == NULL) {
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d106      	bne.n	8000e5a <prv_parse_number+0x26>
        text = ghandle->p.term_str;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3379      	adds	r3, #121	@ 0x79
 8000e50:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8000e52:	e002      	b.n	8000e5a <prv_parse_number+0x26>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <prv_parse_number+0x34>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b20      	cmp	r3, #32
 8000e66:	d0f5      	beq.n	8000e54 <prv_parse_number+0x20>

    minus = (*text == '-' ? (++text, 1) : 0);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b2d      	cmp	r3, #45	@ 0x2d
 8000e6e:	d104      	bne.n	8000e7a <prv_parse_number+0x46>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <prv_parse_number+0x48>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	72fb      	strb	r3, [r7, #11]
    for (; text != NULL && CIN(*text); ++text) {
 8000e7e:	e00d      	b.n	8000e9c <prv_parse_number+0x68>
        res = 10L * res + CTN(*text);
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3b30      	subs	r3, #48	@ 0x30
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
    for (; text != NULL && CIN(*text); ++text) {
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <prv_parse_number+0x7e>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ea8:	d903      	bls.n	8000eb2 <prv_parse_number+0x7e>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b39      	cmp	r3, #57	@ 0x39
 8000eb0:	d9e6      	bls.n	8000e80 <prv_parse_number+0x4c>
    }
    return minus ? -res : res;
 8000eb2:	7afb      	ldrb	r3, [r7, #11]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <prv_parse_number+0x8a>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	425b      	negs	r3, r3
 8000ebc:	e000      	b.n	8000ec0 <prv_parse_number+0x8c>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <prv_parse_float_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* ghandle, const char* text) {
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1, sign = (lwgps_float_t)1;
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8001024 <prv_parse_float_number+0x158>)
 8000ee8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8001024 <prv_parse_float_number+0x158>)
 8000ef2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (text == NULL) {
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d106      	bne.n	8000f0a <prv_parse_float_number+0x3e>
        text = ghandle->p.term_str;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3379      	adds	r3, #121	@ 0x79
 8000f00:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8000f02:	e002      	b.n	8000f0a <prv_parse_float_number+0x3e>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <prv_parse_float_number+0x4c>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	d0f5      	beq.n	8000f04 <prv_parse_float_number+0x38>

    if (*text == '-') { /* Check sign */
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f1e:	d126      	bne.n	8000f6e <prv_parse_float_number+0xa2>
        sign = -1;
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	4b40      	ldr	r3, [pc, #256]	@ (8001028 <prv_parse_float_number+0x15c>)
 8000f26:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ++text;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Convert main part */
 8000f30:	e01d      	b.n	8000f6e <prv_parse_float_number+0xa2>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <prv_parse_float_number+0x160>)
 8000f38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f3c:	f7ff fb54 	bl	80005e8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4614      	mov	r4, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3b30      	subs	r3, #48	@ 0x30
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fae0 	bl	8000514 <__aeabi_i2d>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff f98e 	bl	800027c <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++text;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Convert main part */
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f74:	d903      	bls.n	8000f7e <prv_parse_float_number+0xb2>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b39      	cmp	r3, #57	@ 0x39
 8000f7c:	d9d9      	bls.n	8000f32 <prv_parse_float_number+0x66>
    }
    if (*text == '.') { /* Skip the dot character */
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f84:	d12c      	bne.n	8000fe0 <prv_parse_float_number+0x114>
        ++text;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Get the power */
 8000f8c:	e028      	b.n	8000fe0 <prv_parse_float_number+0x114>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <prv_parse_float_number+0x160>)
 8000f94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f98:	f7ff fb26 	bl	80005e8 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4614      	mov	r4, r2
 8000fa2:	461d      	mov	r5, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	3b30      	subs	r3, #48	@ 0x30
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fab2 	bl	8000514 <__aeabi_i2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f7ff f960 	bl	800027c <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10;
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <prv_parse_float_number+0x160>)
 8000fca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fce:	f7ff fb0b 	bl	80005e8 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++text;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Get the power */
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000fe6:	d903      	bls.n	8000ff0 <prv_parse_float_number+0x124>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b39      	cmp	r3, #57	@ 0x39
 8000fee:	d9ce      	bls.n	8000f8e <prv_parse_float_number+0xc2>
    }
    return sign * value / power;
 8000ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ff4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ff8:	f7ff faf6 	bl	80005e8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001008:	f7ff fc18 	bl	800083c <__aeabi_ddiv>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	ec43 2b17 	vmov	d7, r2, r3
}
 8001014:	eeb0 0a47 	vmov.f32	s0, s14
 8001018:	eef0 0a67 	vmov.f32	s1, s15
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bdb0      	pop	{r4, r5, r7, pc}
 8001022:	bf00      	nop
 8001024:	3ff00000 	.word	0x3ff00000
 8001028:	bff00000 	.word	0xbff00000
 800102c:	40240000 	.word	0x40240000

08001030 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       ghandle: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* ghandle) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    lwgps_float_t llong, deg, min;

    llong = prv_parse_float_number(ghandle, NULL); /* Parse value as double */
 8001038:	2100      	movs	r1, #0
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff46 	bl	8000ecc <prv_parse_float_number>
 8001040:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)llong / 100));            /* Get absolute degrees value, interested in integer part only */
 8001044:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001048:	f7ff fce0 	bl	8000a0c <__aeabi_d2iz>
 800104c:	4603      	mov	r3, r0
 800104e:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <prv_parse_lat_long+0x94>)
 8001050:	fb82 1203 	smull	r1, r2, r2, r3
 8001054:	1152      	asrs	r2, r2, #5
 8001056:	17db      	asrs	r3, r3, #31
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa5a 	bl	8000514 <__aeabi_i2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = llong - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <prv_parse_lat_long+0x98>)
 800106e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001072:	f7ff fab9 	bl	80005e8 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800107e:	f7ff f8fb 	bl	8000278 <__aeabi_dsub>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	e9c7 2302 	strd	r2, r3, [r7, #8]
    llong = deg + (min / FLT(60));                 /* Calculate latitude/longitude */
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <prv_parse_lat_long+0x9c>)
 8001090:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001094:	f7ff fbd2 	bl	800083c <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a0:	f7ff f8ec 	bl	800027c <__adddf3>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return llong;
 80010ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80010b4:	eeb0 0a47 	vmov.f32	s0, s14
 80010b8:	eef0 0a67 	vmov.f32	s1, s15
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	51eb851f 	.word	0x51eb851f
 80010c8:	40590000 	.word	0x40590000
 80010cc:	404e0000 	.word	0x404e0000

080010d0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* ghandle) {
 80010d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
    if (ghandle->p.term_num == 0) { /* Check string type */
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f891 1087 	ldrb.w	r1, [r1, #135]	@ 0x87
 80010e0:	2900      	cmp	r1, #0
 80010e2:	d169      	bne.n	80011b8 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(ghandle->p.term_str, "$GPGGA", 6) || !strncmp(ghandle->p.term_str, "$GNGGA", 6)) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3379      	adds	r3, #121	@ 0x79
 80010e8:	2206      	movs	r2, #6
 80010ea:	49bd      	ldr	r1, [pc, #756]	@ (80013e0 <prv_parse_term+0x310>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fc0f 	bl	8004910 <strncmp>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <prv_parse_term+0x3c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3379      	adds	r3, #121	@ 0x79
 80010fc:	2206      	movs	r2, #6
 80010fe:	49b9      	ldr	r1, [pc, #740]	@ (80013e4 <prv_parse_term+0x314>)
 8001100:	4618      	mov	r0, r3
 8001102:	f003 fc05 	bl	8004910 <strncmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <prv_parse_term+0x46>
            ghandle->p.stat = STAT_GGA;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8001114:	e04e      	b.n	80011b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(ghandle->p.term_str, "$GPGSA", 6) || !strncmp(ghandle->p.term_str, "$GNGSA", 6)) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3379      	adds	r3, #121	@ 0x79
 800111a:	2206      	movs	r2, #6
 800111c:	49b2      	ldr	r1, [pc, #712]	@ (80013e8 <prv_parse_term+0x318>)
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fbf6 	bl	8004910 <strncmp>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <prv_parse_term+0x6e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3379      	adds	r3, #121	@ 0x79
 800112e:	2206      	movs	r2, #6
 8001130:	49ae      	ldr	r1, [pc, #696]	@ (80013ec <prv_parse_term+0x31c>)
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fbec 	bl	8004910 <strncmp>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <prv_parse_term+0x78>
            ghandle->p.stat = STAT_GSA;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2202      	movs	r2, #2
 8001142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8001146:	e035      	b.n	80011b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(ghandle->p.term_str, "$GPGSV", 6) || !strncmp(ghandle->p.term_str, "$GNGSV", 6)) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3379      	adds	r3, #121	@ 0x79
 800114c:	2206      	movs	r2, #6
 800114e:	49a8      	ldr	r1, [pc, #672]	@ (80013f0 <prv_parse_term+0x320>)
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fbdd 	bl	8004910 <strncmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d009      	beq.n	8001170 <prv_parse_term+0xa0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3379      	adds	r3, #121	@ 0x79
 8001160:	2206      	movs	r2, #6
 8001162:	49a4      	ldr	r1, [pc, #656]	@ (80013f4 <prv_parse_term+0x324>)
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fbd3 	bl	8004910 <strncmp>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d104      	bne.n	800117a <prv_parse_term+0xaa>
            ghandle->p.stat = STAT_GSV;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8001178:	e01c      	b.n	80011b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(ghandle->p.term_str, "$GPRMC", 6) || !strncmp(ghandle->p.term_str, "$GNRMC", 6)) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3379      	adds	r3, #121	@ 0x79
 800117e:	2206      	movs	r2, #6
 8001180:	499d      	ldr	r1, [pc, #628]	@ (80013f8 <prv_parse_term+0x328>)
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fbc4 	bl	8004910 <strncmp>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d009      	beq.n	80011a2 <prv_parse_term+0xd2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3379      	adds	r3, #121	@ 0x79
 8001192:	2206      	movs	r2, #6
 8001194:	4999      	ldr	r1, [pc, #612]	@ (80013fc <prv_parse_term+0x32c>)
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fbba 	bl	8004910 <strncmp>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <prv_parse_term+0xdc>
            ghandle->p.stat = STAT_RMC;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2204      	movs	r2, #4
 80011a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80011aa:	e003      	b.n	80011b4 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(ghandle->p.term_str, "$PUBX", 5)) {
            ghandle->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            ghandle->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        }
        return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e241      	b.n	800163c <prv_parse_term+0x56c>
    }

    /* Start parsing terms */
    if (ghandle->p.stat == STAT_UNKNOWN) {
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 80011be:	2900      	cmp	r1, #0
 80011c0:	f000 823b 	beq.w	800163a <prv_parse_term+0x56a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) { /* Process GPGGA statement */
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 80011ca:	2901      	cmp	r1, #1
 80011cc:	f040 80d9 	bne.w	8001382 <prv_parse_term+0x2b2>
        switch (ghandle->p.term_num) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80011d6:	3b01      	subs	r3, #1
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	f200 8223 	bhi.w	8001624 <prv_parse_term+0x554>
 80011de:	a201      	add	r2, pc, #4	@ (adr r2, 80011e4 <prv_parse_term+0x114>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	08001219 	.word	0x08001219
 80011e8:	08001293 	.word	0x08001293
 80011ec:	080012a9 	.word	0x080012a9
 80011f0:	080012d3 	.word	0x080012d3
 80011f4:	080012e9 	.word	0x080012e9
 80011f8:	08001313 	.word	0x08001313
 80011fc:	08001327 	.word	0x08001327
 8001200:	08001625 	.word	0x08001625
 8001204:	0800133b 	.word	0x0800133b
 8001208:	08001625 	.word	0x08001625
 800120c:	08001353 	.word	0x08001353
 8001210:	08001625 	.word	0x08001625
 8001214:	0800136b 	.word	0x0800136b
            case 1: /* Process UTC time */
                ghandle->p.data.gga.hours = 10 * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800121e:	3b30      	subs	r3, #48	@ 0x30
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	4413      	add	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001232:	4413      	add	r3, r2
 8001234:	b2db      	uxtb	r3, r3
 8001236:	3b30      	subs	r3, #48	@ 0x30
 8001238:	b2da      	uxtb	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
                ghandle->p.data.gga.minutes = 10 * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001246:	3b30      	subs	r3, #48	@ 0x30
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800125a:	4413      	add	r3, r2
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3b30      	subs	r3, #48	@ 0x30
 8001260:	b2da      	uxtb	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
                ghandle->p.data.gga.seconds = 10 * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800126e:	3b30      	subs	r3, #48	@ 0x30
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4413      	add	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001282:	4413      	add	r3, r2
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3b30      	subs	r3, #48	@ 0x30
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                break;
 8001290:	e1d3      	b.n	800163a <prv_parse_term+0x56a>
            case 2:                                                         /* Latitude */
                ghandle->p.data.gga.latitude = prv_parse_lat_long(ghandle); /* Parse latitude */
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fecc 	bl	8001030 <prv_parse_lat_long>
 8001298:	eeb0 7a40 	vmov.f32	s14, s0
 800129c:	eef0 7a60 	vmov.f32	s15, s1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80012a6:	e1c8      	b.n	800163a <prv_parse_term+0x56a>
            case 3: /* Latitude north/south information */
                if (ghandle->p.term_str[0] == 'S' || ghandle->p.term_str[0] == 's') {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80012ae:	2b53      	cmp	r3, #83	@ 0x53
 80012b0:	d005      	beq.n	80012be <prv_parse_term+0x1ee>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80012b8:	2b73      	cmp	r3, #115	@ 0x73
 80012ba:	f040 81b5 	bne.w	8001628 <prv_parse_term+0x558>
                    ghandle->p.data.gga.latitude = -ghandle->p.data.gga.latitude;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80012c4:	4690      	mov	r8, r2
 80012c6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	e9c3 8924 	strd	r8, r9, [r3, #144]	@ 0x90
                }
                break;
 80012d0:	e1aa      	b.n	8001628 <prv_parse_term+0x558>
            case 4:                                                          /* Longitude */
                ghandle->p.data.gga.longitude = prv_parse_lat_long(ghandle); /* Parse longitude */
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff feac 	bl	8001030 <prv_parse_lat_long>
 80012d8:	eeb0 7a40 	vmov.f32	s14, s0
 80012dc:	eef0 7a60 	vmov.f32	s15, s1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80012e6:	e1a8      	b.n	800163a <prv_parse_term+0x56a>
            case 5: /* Longitude east/west information */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80012ee:	2b57      	cmp	r3, #87	@ 0x57
 80012f0:	d005      	beq.n	80012fe <prv_parse_term+0x22e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80012f8:	2b77      	cmp	r3, #119	@ 0x77
 80012fa:	f040 8197 	bne.w	800162c <prv_parse_term+0x55c>
                    ghandle->p.data.gga.longitude = -ghandle->p.data.gga.longitude;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001304:	4614      	mov	r4, r2
 8001306:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	e9c3 4526 	strd	r4, r5, [r3, #152]	@ 0x98
                }
                break;
 8001310:	e18c      	b.n	800162c <prv_parse_term+0x55c>
            case 6: /* Fix status */ ghandle->p.data.gga.fix = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001312:	2100      	movs	r1, #0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fd8d 	bl	8000e34 <prv_parse_number>
 800131a:	4603      	mov	r3, r0
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
 8001324:	e189      	b.n	800163a <prv_parse_term+0x56a>
            case 7: /* Satellites in use */
                ghandle->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(ghandle, NULL);
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fd83 	bl	8000e34 <prv_parse_number>
 800132e:	4603      	mov	r3, r0
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
                break;
 8001338:	e17f      	b.n	800163a <prv_parse_term+0x56a>
            case 9: /* Altitude */ ghandle->p.data.gga.altitude = prv_parse_float_number(ghandle, NULL); break;
 800133a:	2100      	movs	r1, #0
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fdc5 	bl	8000ecc <prv_parse_float_number>
 8001342:	eeb0 7a40 	vmov.f32	s14, s0
 8001346:	eef0 7a60 	vmov.f32	s15, s1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
 8001350:	e173      	b.n	800163a <prv_parse_term+0x56a>
            case 11: /* Altitude above ellipsoid */
                ghandle->p.data.gga.geo_sep = prv_parse_float_number(ghandle, NULL);
 8001352:	2100      	movs	r1, #0
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fdb9 	bl	8000ecc <prv_parse_float_number>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	eef0 7a60 	vmov.f32	s15, s1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
                break;
 8001368:	e167      	b.n	800163a <prv_parse_term+0x56a>
            case 13: /* Age of differential GPS correction data */
                ghandle->p.data.gga.dgps_age = prv_parse_float_number(ghandle, NULL);
 800136a:	2100      	movs	r1, #0
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fdad 	bl	8000ecc <prv_parse_float_number>
 8001372:	eeb0 7a40 	vmov.f32	s14, s0
 8001376:	eef0 7a60 	vmov.f32	s15, s1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	ed83 7b2e 	vstr	d7, [r3, #184]	@ 0xb8
                break;
 8001380:	e15b      	b.n	800163a <prv_parse_term+0x56a>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) { /* Process GPGSA statement */
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 8001388:	2902      	cmp	r1, #2
 800138a:	f040 8083 	bne.w	8001494 <prv_parse_term+0x3c4>
        switch (ghandle->p.term_num) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001394:	3b02      	subs	r3, #2
 8001396:	2b0f      	cmp	r3, #15
 8001398:	d860      	bhi.n	800145c <prv_parse_term+0x38c>
 800139a:	a201      	add	r2, pc, #4	@ (adr r2, 80013a0 <prv_parse_term+0x2d0>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	08001401 	.word	0x08001401
 80013a4:	0800145d 	.word	0x0800145d
 80013a8:	0800145d 	.word	0x0800145d
 80013ac:	0800145d 	.word	0x0800145d
 80013b0:	0800145d 	.word	0x0800145d
 80013b4:	0800145d 	.word	0x0800145d
 80013b8:	0800145d 	.word	0x0800145d
 80013bc:	0800145d 	.word	0x0800145d
 80013c0:	0800145d 	.word	0x0800145d
 80013c4:	0800145d 	.word	0x0800145d
 80013c8:	0800145d 	.word	0x0800145d
 80013cc:	0800145d 	.word	0x0800145d
 80013d0:	0800145d 	.word	0x0800145d
 80013d4:	08001415 	.word	0x08001415
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	08001445 	.word	0x08001445
 80013e0:	08005238 	.word	0x08005238
 80013e4:	08005240 	.word	0x08005240
 80013e8:	08005248 	.word	0x08005248
 80013ec:	08005250 	.word	0x08005250
 80013f0:	08005258 	.word	0x08005258
 80013f4:	08005260 	.word	0x08005260
 80013f8:	08005268 	.word	0x08005268
 80013fc:	08005270 	.word	0x08005270
            case 2: ghandle->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001400:	2100      	movs	r1, #0
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fd16 	bl	8000e34 <prv_parse_number>
 8001408:	4603      	mov	r3, r0
 800140a:	b2da      	uxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 8001412:	e112      	b.n	800163a <prv_parse_term+0x56a>
            case 15: ghandle->p.data.gsa.dop_p = prv_parse_float_number(ghandle, NULL); break;
 8001414:	2100      	movs	r1, #0
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fd58 	bl	8000ecc <prv_parse_float_number>
 800141c:	eeb0 7a40 	vmov.f32	s14, s0
 8001420:	eef0 7a60 	vmov.f32	s15, s1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
 800142a:	e106      	b.n	800163a <prv_parse_term+0x56a>
            case 16: ghandle->p.data.gsa.dop_h = prv_parse_float_number(ghandle, NULL); break;
 800142c:	2100      	movs	r1, #0
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fd4c 	bl	8000ecc <prv_parse_float_number>
 8001434:	eeb0 7a40 	vmov.f32	s14, s0
 8001438:	eef0 7a60 	vmov.f32	s15, s1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
 8001442:	e0fa      	b.n	800163a <prv_parse_term+0x56a>
            case 17: ghandle->p.data.gsa.dop_v = prv_parse_float_number(ghandle, NULL); break;
 8001444:	2100      	movs	r1, #0
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fd40 	bl	8000ecc <prv_parse_float_number>
 800144c:	eeb0 7a40 	vmov.f32	s14, s0
 8001450:	eef0 7a60 	vmov.f32	s15, s1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 800145a:	e0ee      	b.n	800163a <prv_parse_term+0x56a>
            default:
                /* Parse satellite IDs */
                if (ghandle->p.term_num >= 3 && ghandle->p.term_num <= 14) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001462:	2b02      	cmp	r3, #2
 8001464:	f240 80e4 	bls.w	8001630 <prv_parse_term+0x560>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800146e:	2b0e      	cmp	r3, #14
 8001470:	f200 80de 	bhi.w	8001630 <prv_parse_term+0x560>
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8001474:	2100      	movs	r1, #0
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fcdc 	bl	8000e34 <prv_parse_number>
 800147c:	4602      	mov	r2, r0
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001484:	3b03      	subs	r3, #3
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8001486:	b2d1      	uxtb	r1, r2
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	460a      	mov	r2, r1
 800148e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                }
                break;
 8001492:	e0cd      	b.n	8001630 <prv_parse_term+0x560>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) { /* Process GPGSV statement */
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 800149a:	2903      	cmp	r1, #3
 800149c:	d11b      	bne.n	80014d6 <prv_parse_term+0x406>
        switch (ghandle->p.term_num) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d002      	beq.n	80014ae <prv_parse_term+0x3de>
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d00a      	beq.n	80014c2 <prv_parse_term+0x3f2>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80014ac:	e0c5      	b.n	800163a <prv_parse_term+0x56a>
                ghandle->p.data.gsv.stat_num = (uint8_t)prv_parse_number(ghandle, NULL);
 80014ae:	2100      	movs	r1, #0
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fcbf 	bl	8000e34 <prv_parse_number>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                break;
 80014c0:	e0bb      	b.n	800163a <prv_parse_term+0x56a>
                ghandle->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(ghandle, NULL);
 80014c2:	2100      	movs	r1, #0
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fcb5 	bl	8000e34 <prv_parse_number>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
                break;
 80014d4:	e0b1      	b.n	800163a <prv_parse_term+0x56a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) { /* Process GPRMC statement */
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 80014dc:	2904      	cmp	r1, #4
 80014de:	f040 80ac 	bne.w	800163a <prv_parse_term+0x56a>
        switch (ghandle->p.term_num) {
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f891 1087 	ldrb.w	r1, [r1, #135]	@ 0x87
 80014e8:	3902      	subs	r1, #2
 80014ea:	2909      	cmp	r1, #9
 80014ec:	f200 80a2 	bhi.w	8001634 <prv_parse_term+0x564>
 80014f0:	a001      	add	r0, pc, #4	@ (adr r0, 80014f8 <prv_parse_term+0x428>)
 80014f2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	08001521 	.word	0x08001521
 80014fc:	08001635 	.word	0x08001635
 8001500:	08001635 	.word	0x08001635
 8001504:	08001635 	.word	0x08001635
 8001508:	08001635 	.word	0x08001635
 800150c:	0800153b 	.word	0x0800153b
 8001510:	08001553 	.word	0x08001553
 8001514:	0800156b 	.word	0x0800156b
 8001518:	080015e5 	.word	0x080015e5
 800151c:	080015fd 	.word	0x080015fd
            case 2: /* Process valid status */ ghandle->p.data.rmc.is_valid = (ghandle->p.term_str[0] == 'A'); break;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001526:	2b41      	cmp	r3, #65	@ 0x41
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 8001538:	e07f      	b.n	800163a <prv_parse_term+0x56a>
            case 7: /* Process ground speed in knots */
                ghandle->p.data.rmc.speed = prv_parse_float_number(ghandle, NULL);
 800153a:	2100      	movs	r1, #0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fcc5 	bl	8000ecc <prv_parse_float_number>
 8001542:	eeb0 7a40 	vmov.f32	s14, s0
 8001546:	eef0 7a60 	vmov.f32	s15, s1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001550:	e073      	b.n	800163a <prv_parse_term+0x56a>
            case 8: /* Process true ground coarse */
                ghandle->p.data.rmc.course = prv_parse_float_number(ghandle, NULL);
 8001552:	2100      	movs	r1, #0
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fcb9 	bl	8000ecc <prv_parse_float_number>
 800155a:	eeb0 7a40 	vmov.f32	s14, s0
 800155e:	eef0 7a60 	vmov.f32	s15, s1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001568:	e067      	b.n	800163a <prv_parse_term+0x56a>
            case 9: /* Process date */
                ghandle->p.data.rmc.date = (uint8_t)(10U * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001570:	3b30      	subs	r3, #48	@ 0x30
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4413      	add	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001584:	4413      	add	r3, r2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	3b30      	subs	r3, #48	@ 0x30
 800158a:	b2da      	uxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                ghandle->p.data.rmc.month = (uint8_t)(10U * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001598:	3b30      	subs	r3, #48	@ 0x30
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80015ac:	4413      	add	r3, r2
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	3b30      	subs	r3, #48	@ 0x30
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
                ghandle->p.data.rmc.year = (uint8_t)(10U * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80015c0:	3b30      	subs	r3, #48	@ 0x30
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80015d4:	4413      	add	r3, r2
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3b30      	subs	r3, #48	@ 0x30
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
                break;
 80015e2:	e02a      	b.n	800163a <prv_parse_term+0x56a>
            case 10: /* Process magnetic variation */
                ghandle->p.data.rmc.variation = prv_parse_float_number(ghandle, NULL);
 80015e4:	2100      	movs	r1, #0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fc70 	bl	8000ecc <prv_parse_float_number>
 80015ec:	eeb0 7a40 	vmov.f32	s14, s0
 80015f0:	eef0 7a60 	vmov.f32	s15, s1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
                break;
 80015fa:	e01e      	b.n	800163a <prv_parse_term+0x56a>
            case 11: /* Process magnetic variation east/west */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	f891 1079 	ldrb.w	r1, [r1, #121]	@ 0x79
 8001602:	2957      	cmp	r1, #87	@ 0x57
 8001604:	d004      	beq.n	8001610 <prv_parse_term+0x540>
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f891 1079 	ldrb.w	r1, [r1, #121]	@ 0x79
 800160c:	2977      	cmp	r1, #119	@ 0x77
 800160e:	d113      	bne.n	8001638 <prv_parse_term+0x568>
                    ghandle->p.data.rmc.variation = -ghandle->p.data.rmc.variation;
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	e9d1 012a 	ldrd	r0, r1, [r1, #168]	@ 0xa8
 8001616:	4602      	mov	r2, r0
 8001618:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
                }
                break;
 8001622:	e009      	b.n	8001638 <prv_parse_term+0x568>
            default: break;
 8001624:	bf00      	nop
 8001626:	e008      	b.n	800163a <prv_parse_term+0x56a>
                break;
 8001628:	bf00      	nop
 800162a:	e006      	b.n	800163a <prv_parse_term+0x56a>
                break;
 800162c:	bf00      	nop
 800162e:	e004      	b.n	800163a <prv_parse_term+0x56a>
                break;
 8001630:	bf00      	nop
 8001632:	e002      	b.n	800163a <prv_parse_term+0x56a>
            default: break;
 8001634:	bf00      	nop
 8001636:	e000      	b.n	800163a <prv_parse_term+0x56a>
                break;
 8001638:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001646:	bf00      	nop

08001648 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* ghandle) {
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001656:	2b2f      	cmp	r3, #47	@ 0x2f
 8001658:	d90a      	bls.n	8001670 <prv_check_crc+0x28>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001660:	2b39      	cmp	r3, #57	@ 0x39
 8001662:	d805      	bhi.n	8001670 <prv_check_crc+0x28>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	b2da      	uxtb	r2, r3
 800166e:	e024      	b.n	80016ba <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001676:	2b60      	cmp	r3, #96	@ 0x60
 8001678:	d90c      	bls.n	8001694 <prv_check_crc+0x4c>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001680:	2b7a      	cmp	r3, #122	@ 0x7a
 8001682:	d807      	bhi.n	8001694 <prv_check_crc+0x4c>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800168a:	3b57      	subs	r3, #87	@ 0x57
 800168c:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	b2da      	uxtb	r2, r3
 8001692:	e012      	b.n	80016ba <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800169a:	2b40      	cmp	r3, #64	@ 0x40
 800169c:	d90c      	bls.n	80016b8 <prv_check_crc+0x70>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80016a4:	2b5a      	cmp	r3, #90	@ 0x5a
 80016a6:	d807      	bhi.n	80016b8 <prv_check_crc+0x70>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80016ae:	3b37      	subs	r3, #55	@ 0x37
 80016b0:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	e000      	b.n	80016ba <prv_check_crc+0x72>
 80016b8:	2200      	movs	r2, #0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80016c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80016c2:	d90b      	bls.n	80016dc <prv_check_crc+0x94>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80016ca:	2b39      	cmp	r3, #57	@ 0x39
 80016cc:	d806      	bhi.n	80016dc <prv_check_crc+0x94>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	e026      	b.n	800172a <prv_check_crc+0xe2>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80016e2:	2b60      	cmp	r3, #96	@ 0x60
 80016e4:	d90d      	bls.n	8001702 <prv_check_crc+0xba>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80016ec:	2b7a      	cmp	r3, #122	@ 0x7a
 80016ee:	d808      	bhi.n	8001702 <prv_check_crc+0xba>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80016f6:	3b57      	subs	r3, #87	@ 0x57
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	e013      	b.n	800172a <prv_check_crc+0xe2>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001708:	2b40      	cmp	r3, #64	@ 0x40
 800170a:	d90d      	bls.n	8001728 <prv_check_crc+0xe0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001712:	2b5a      	cmp	r3, #90	@ 0x5a
 8001714:	d808      	bhi.n	8001728 <prv_check_crc+0xe0>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800171c:	3b37      	subs	r3, #55	@ 0x37
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	b2db      	uxtb	r3, r3
 8001726:	e000      	b.n	800172a <prv_check_crc+0xe2>
 8001728:	2300      	movs	r3, #0
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800172a:	4313      	orrs	r3, r2
 800172c:	73fb      	strb	r3, [r7, #15]
    return ghandle->p.crc_calc == crc;              /* They must match! */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	429a      	cmp	r2, r3
 8001738:	bf0c      	ite	eq
 800173a:	2301      	moveq	r3, #1
 800173c:	2300      	movne	r3, #0
 800173e:	b2db      	uxtb	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* ghandle) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800175a:	2b01      	cmp	r3, #1
 800175c:	d13c      	bne.n	80017d8 <prv_copy_from_tmp_memory+0x8c>
        ghandle->latitude = ghandle->p.data.gga.latitude;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	e9c1 2300 	strd	r2, r3, [r1]
        ghandle->longitude = ghandle->p.data.gga.longitude;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	e9c1 2302 	strd	r2, r3, [r1, #8]
        ghandle->altitude = ghandle->p.data.gga.altitude;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ghandle->geo_sep = ghandle->p.data.gga.geo_sep;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ghandle->sats_in_use = ghandle->p.data.gga.sats_in_use;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f883 2020 	strb.w	r2, [r3, #32]
        ghandle->fix = ghandle->p.data.gga.fix;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        ghandle->hours = ghandle->p.data.gga.hours;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        ghandle->minutes = ghandle->p.data.gga.minutes;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 20b3 	ldrb.w	r2, [r3, #179]	@ 0xb3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        ghandle->seconds = ghandle->p.data.gga.seconds;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        ghandle->dgps_age = ghandle->p.data.gga.dgps_age;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 80017d6:	e061      	b.n	800189c <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d121      	bne.n	8001826 <prv_copy_from_tmp_memory+0xda>
        ghandle->dop_h = ghandle->p.data.gsa.dop_h;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ghandle->dop_p = ghandle->p.data.gsa.dop_p;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ghandle->dop_v = ghandle->p.data.gsa.dop_v;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ghandle->fix_mode = ghandle->p.data.gsa.fix_mode;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        LWGPS_MEMCPY(ghandle->satellites_ids, ghandle->p.data.gsa.satellites_ids, sizeof(ghandle->satellites_ids));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f103 0049 	add.w	r0, r3, #73	@ 0x49
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	33a9      	adds	r3, #169	@ 0xa9
 800181c:	220c      	movs	r2, #12
 800181e:	4619      	mov	r1, r3
 8001820:	f003 f8b4 	bl	800498c <memcpy>
 8001824:	e03a      	b.n	800189c <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800182c:	2b03      	cmp	r3, #3
 800182e:	d106      	bne.n	800183e <prv_copy_from_tmp_memory+0xf2>
        ghandle->sats_in_view = ghandle->p.data.gsv.sats_in_view;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 800183c:	e02e      	b.n	800189c <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001844:	2b04      	cmp	r3, #4
 8001846:	d129      	bne.n	800189c <prv_copy_from_tmp_memory+0x150>
        ghandle->course = ghandle->p.data.rmc.course;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        ghandle->is_valid = ghandle->p.data.rmc.is_valid;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        ghandle->speed = ghandle->p.data.rmc.speed;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        ghandle->variation = ghandle->p.data.rmc.variation;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
        ghandle->date = ghandle->p.data.rmc.date;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        ghandle->month = ghandle->p.data.rmc.month;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        ghandle->year = ghandle->p.data.rmc.year;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        ghandle->clk_bias = ghandle->p.data.time.clk_bias;
        ghandle->clk_drift = ghandle->p.data.time.clk_drift;
        ghandle->tp_gran = ghandle->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       ghandle: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* ghandle) {
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
    LWGPS_MEMSET(ghandle, 0x00, sizeof(*ghandle)); /* Reset structure */
 80018ae:	22c0      	movs	r2, #192	@ 0xc0
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f003 f824 	bl	8004900 <memset>
    return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* ghandle, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* ghandle, const void* data, size_t len) {
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 80018d2:	e0ad      	b.n	8001a30 <lwgps_process+0x16e>
        if (*d == '$') {                                         /* Check for beginning of NMEA line */
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b24      	cmp	r3, #36	@ 0x24
 80018da:	d128      	bne.n	800192e <lwgps_process+0x6c>
            LWGPS_MEMSET(&ghandle->p, 0x00, sizeof(ghandle->p)); /* Reset private memory */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3378      	adds	r3, #120	@ 0x78
 80018e0:	2248      	movs	r2, #72	@ 0x48
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 f80b 	bl	8004900 <memset>
            TERM_ADD(ghandle, *d);                               /* Add character to term */
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80018f0:	2b0b      	cmp	r3, #11
 80018f2:	f200 8097 	bhi.w	8001a24 <lwgps_process+0x162>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80018fc:	4619      	mov	r1, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	440b      	add	r3, r1
 8001906:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001910:	3301      	adds	r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001920:	461a      	mov	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4413      	add	r3, r2
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 800192c:	e07a      	b.n	8001a24 <lwgps_process+0x162>
        } else if (*d == ',') {                                  /* Term separator character */
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b2c      	cmp	r3, #44	@ 0x2c
 8001934:	d11d      	bne.n	8001972 <lwgps_process+0xb0>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff fbca 	bl	80010d0 <prv_parse_term>
            CRC_ADD(ghandle, *d);                                /* Add character to CRC computation */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4053      	eors	r3, r2
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001966:	3301      	adds	r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8001970:	e058      	b.n	8001a24 <lwgps_process+0x162>
        } else if (*d == '*') {                                  /* Start indicates end of data for CRC computation */
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b2a      	cmp	r3, #42	@ 0x2a
 8001978:	d117      	bne.n	80019aa <lwgps_process+0xe8>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fba8 	bl	80010d0 <prv_parse_term>
            ghandle->p.star = 1;                                 /* STAR detected */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800199e:	3301      	adds	r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 80019a8:	e03c      	b.n	8001a24 <lwgps_process+0x162>
        } else if (*d == '\r') {
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b0d      	cmp	r3, #13
 80019b0:	d109      	bne.n	80019c6 <lwgps_process+0x104>
            if (prv_check_crc(ghandle)) { /* Check for CRC result */
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f7ff fe48 	bl	8001648 <prv_check_crc>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d032      	beq.n	8001a24 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(ghandle); /* Copy memory from temporary to user memory */
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f7ff fec4 	bl	800174c <prv_copy_from_tmp_memory>
 80019c4:	e02e      	b.n	8001a24 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!ghandle->p.star) {   /* Add to CRC only if star not yet detected */
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <lwgps_process+0x122>
                CRC_ADD(ghandle, *d); /* Add to CRC */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	4053      	eors	r3, r2
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            }
            TERM_ADD(ghandle, *d); /* Add character to term */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019ea:	2b0b      	cmp	r3, #11
 80019ec:	d81a      	bhi.n	8001a24 <lwgps_process+0x162>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019f4:	4619      	mov	r1, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	440b      	add	r3, r1
 80019fe:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f af4e 	bne.w	80018d4 <lwgps_process+0x12>
        }
    }
    return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* 如果huart1缓冲区已满，标记flag */
  flag = 1;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <HAL_UART_RxCpltCallback+0x1c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000144 	.word	0x20000144

08001a64 <serialPrint>:

void serialPrint(const char *fmt, ...)
{
 8001a64:	b40f      	push	{r0, r1, r2, r3}
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <serialPrint+0x2c>)
 8001a7c:	f002 ff32 	bl	80048e4 <vsniprintf>
  va_end(args);
  // HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 15); // 通过huart2与计算机进行串行通信。
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a8a:	b004      	add	sp, #16
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000208 	.word	0x20000208
 8001a94:	00000000 	.word	0x00000000

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a9c:	f000 fa76 	bl	8001f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa0:	f000 f878 	bl	8001b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa4:	f7ff f990 	bl	8000dc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa8:	f7ff f96e 	bl	8000d88 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001aac:	f000 f996 	bl	8001ddc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* 接收缓冲区 */
  memset(gpsRx, 0, SIZE); // 清空缓冲区。
 8001ab0:	22c8      	movs	r2, #200	@ 0xc8
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	482c      	ldr	r0, [pc, #176]	@ (8001b68 <main+0xd0>)
 8001ab6:	f002 ff23 	bl	8004900 <memset>

  /* 启动DMA；循环模式 */
  HAL_UART_Receive_DMA(&huart3, gpsRx, SIZE);
 8001aba:	22c8      	movs	r2, #200	@ 0xc8
 8001abc:	492a      	ldr	r1, [pc, #168]	@ (8001b68 <main+0xd0>)
 8001abe:	482b      	ldr	r0, [pc, #172]	@ (8001b6c <main+0xd4>)
 8001ac0:	f001 fe2e 	bl	8003720 <HAL_UART_Receive_DMA>

  /* 初始化GPS */
  lwgps_init(&hgps);
 8001ac4:	482a      	ldr	r0, [pc, #168]	@ (8001b70 <main+0xd8>)
 8001ac6:	f7ff feee 	bl	80018a6 <lwgps_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //注释在这一页的最上面
    if (flag == 1)
 8001aca:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <main+0xdc>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d1fb      	bne.n	8001aca <main+0x32>
    {

      /* 如果缓冲区已满，处理接收到的数据 */
      lwgps_process(&hgps, gpsRx, SIZE);
 8001ad2:	22c8      	movs	r2, #200	@ 0xc8
 8001ad4:	4924      	ldr	r1, [pc, #144]	@ (8001b68 <main+0xd0>)
 8001ad6:	4826      	ldr	r0, [pc, #152]	@ (8001b70 <main+0xd8>)
 8001ad8:	f7ff fef3 	bl	80018c2 <lwgps_process>

      /* 打印信息 */
      serialPrint("---\r\n");
 8001adc:	4826      	ldr	r0, [pc, #152]	@ (8001b78 <main+0xe0>)
 8001ade:	f7ff ffc1 	bl	8001a64 <serialPrint>
      serialPrint("Valid status: %d\r\n", hgps.is_valid);                              // 有效状态
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <main+0xd8>)
 8001ae4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4824      	ldr	r0, [pc, #144]	@ (8001b7c <main+0xe4>)
 8001aec:	f7ff ffba 	bl	8001a64 <serialPrint>
      serialPrint("Time: %02d:%02d:%02d\r\n", hgps.hours, hgps.minutes, hgps.seconds); // 时间
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <main+0xd8>)
 8001af2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001af6:	4619      	mov	r1, r3
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <main+0xd8>)
 8001afa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <main+0xd8>)
 8001b02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b06:	481e      	ldr	r0, [pc, #120]	@ (8001b80 <main+0xe8>)
 8001b08:	f7ff ffac 	bl	8001a64 <serialPrint>
      serialPrint("Latitude: %f degrees\r\n", hgps.latitude);                          // 纬度
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <main+0xd8>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	481c      	ldr	r0, [pc, #112]	@ (8001b84 <main+0xec>)
 8001b14:	f7ff ffa6 	bl	8001a64 <serialPrint>
      serialPrint("Longitude: %f degrees\r\n", hgps.longitude);                        // 经度
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <main+0xd8>)
 8001b1a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b1e:	481a      	ldr	r0, [pc, #104]	@ (8001b88 <main+0xf0>)
 8001b20:	f7ff ffa0 	bl	8001a64 <serialPrint>
      serialPrint("Altitude: %f meters\r\n", hgps.altitude + hgps.geo_sep);            // 海拔
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <main+0xd8>)
 8001b26:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <main+0xd8>)
 8001b2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b30:	f7fe fba4 	bl	800027c <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4814      	ldr	r0, [pc, #80]	@ (8001b8c <main+0xf4>)
 8001b3a:	f7ff ff93 	bl	8001a64 <serialPrint>
      serialPrint("Speed: %.2f km/h\r\n", hgps.speed * 1.852);                         // 速度
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <main+0xd8>)
 8001b40:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001b44:	a306      	add	r3, pc, #24	@ (adr r3, 8001b60 <main+0xc8>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fd4d 	bl	80005e8 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	480f      	ldr	r0, [pc, #60]	@ (8001b90 <main+0xf8>)
 8001b54:	f7ff ff86 	bl	8001a64 <serialPrint>

      flag = 0;
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <main+0xdc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
    if (flag == 1)
 8001b5e:	e7b4      	b.n	8001aca <main+0x32>
 8001b60:	c083126f 	.word	0xc083126f
 8001b64:	3ffda1ca 	.word	0x3ffda1ca
 8001b68:	2000007c 	.word	0x2000007c
 8001b6c:	2000030c 	.word	0x2000030c
 8001b70:	20000148 	.word	0x20000148
 8001b74:	20000144 	.word	0x20000144
 8001b78:	08005278 	.word	0x08005278
 8001b7c:	08005280 	.word	0x08005280
 8001b80:	08005294 	.word	0x08005294
 8001b84:	080052ac 	.word	0x080052ac
 8001b88:	080052c4 	.word	0x080052c4
 8001b8c:	080052dc 	.word	0x080052dc
 8001b90:	080052f4 	.word	0x080052f4

08001b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b094      	sub	sp, #80	@ 0x50
 8001b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	2230      	movs	r2, #48	@ 0x30
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 feac 	bl	8004900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <SystemClock_Config+0xcc>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	4a27      	ldr	r2, [pc, #156]	@ (8001c60 <SystemClock_Config+0xcc>)
 8001bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <SystemClock_Config+0xcc>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <SystemClock_Config+0xd0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a21      	ldr	r2, [pc, #132]	@ (8001c64 <SystemClock_Config+0xd0>)
 8001bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <SystemClock_Config+0xd0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c04:	2308      	movs	r3, #8
 8001c06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c08:	23a8      	movs	r3, #168	@ 0xa8
 8001c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c10:	2304      	movs	r3, #4
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 f8d9 	bl	8002dd0 <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c24:	f000 f820 	bl	8001c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	2105      	movs	r1, #5
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fb3a 	bl	80032c0 <HAL_RCC_ClockConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c52:	f000 f809 	bl	8001c68 <Error_Handler>
  }
}
 8001c56:	bf00      	nop
 8001c58:	3750      	adds	r7, #80	@ 0x50
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40007000 	.word	0x40007000

08001c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* 用户可以添加自己的实现来报告HAL错误返回状态 */
  __disable_irq();
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <Error_Handler+0x8>

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <NMI_Handler+0x4>

08001ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1a:	f000 f989 	bl	8002030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA1_Stream1_IRQHandler+0x10>)
 8001d2a:	f000 fc4b 	bl	80025c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000354 	.word	0x20000354

08001d38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <USART3_IRQHandler+0x10>)
 8001d3e:	f001 fd15 	bl	800376c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000030c 	.word	0x2000030c

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f002 fdda 	bl	8004934 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20020000 	.word	0x20020000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20000308 	.word	0x20000308
 8001db4:	20000500 	.word	0x20000500

08001db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <MX_USART3_UART_Init+0x50>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001de8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e14:	f001 fc34 	bl	8003680 <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e1e:	f7ff ff23 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000030c 	.word	0x2000030c
 8001e2c:	40004800 	.word	0x40004800

08001e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a35      	ldr	r2, [pc, #212]	@ (8001f24 <HAL_UART_MspInit+0xf4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d164      	bne.n	8001f1c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b34      	ldr	r3, [pc, #208]	@ (8001f28 <HAL_UART_MspInit+0xf8>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a33      	ldr	r2, [pc, #204]	@ (8001f28 <HAL_UART_MspInit+0xf8>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <HAL_UART_MspInit+0xf8>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b2d      	ldr	r3, [pc, #180]	@ (8001f28 <HAL_UART_MspInit+0xf8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a2c      	ldr	r2, [pc, #176]	@ (8001f28 <HAL_UART_MspInit+0xf8>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <HAL_UART_MspInit+0xf8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4821      	ldr	r0, [pc, #132]	@ (8001f2c <HAL_UART_MspInit+0xfc>)
 8001ea8:	f000 fdf6 	bl	8002a98 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001eac:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001eae:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <HAL_UART_MspInit+0x104>)
 8001eb0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001eb4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001eb8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001ec8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ecc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ee0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001ee4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ee8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ef0:	480f      	ldr	r0, [pc, #60]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001ef2:	f000 f9cf 	bl	8002294 <HAL_DMA_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001efc:	f7ff feb4 	bl	8001c68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001f04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <HAL_UART_MspInit+0x100>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2027      	movs	r0, #39	@ 0x27
 8001f12:	f000 f988 	bl	8002226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f16:	2027      	movs	r0, #39	@ 0x27
 8001f18:	f000 f9a1 	bl	800225e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	@ 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40004800 	.word	0x40004800
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	20000354 	.word	0x20000354
 8001f34:	40026028 	.word	0x40026028

08001f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f3c:	f7ff ff3c 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f40:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f42:	490d      	ldr	r1, [pc, #52]	@ (8001f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f58:	4c0a      	ldr	r4, [pc, #40]	@ (8001f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f66:	f002 fceb 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6a:	f7ff fd95 	bl	8001a98 <main>
  bx  lr    
 8001f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f7c:	0800536c 	.word	0x0800536c
  ldr r2, =_sbss
 8001f80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f84:	20000500 	.word	0x20000500

08001f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC_IRQHandler>
	...

08001f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	@ (8001fcc <HAL_Init+0x40>)
 8001f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_Init+0x40>)
 8001fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a07      	ldr	r2, [pc, #28]	@ (8001fcc <HAL_Init+0x40>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f000 f92b 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fba:	200f      	movs	r0, #15
 8001fbc:	f000 f808 	bl	8001fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc0:	f7ff fe58 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023c00 	.word	0x40023c00

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_InitTick+0x54>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_InitTick+0x58>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f943 	bl	800227a <HAL_SYSTICK_Config>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00e      	b.n	800201c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0f      	cmp	r3, #15
 8002002:	d80a      	bhi.n	800201a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002004:	2200      	movs	r2, #0
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f000 f90b 	bl	8002226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002010:	4a06      	ldr	r2, [pc, #24]	@ (800202c <HAL_InitTick+0x5c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000000 	.word	0x20000000
 8002028:	20000008 	.word	0x20000008
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_IncTick+0x20>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_IncTick+0x24>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <HAL_IncTick+0x24>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000008 	.word	0x20000008
 8002054:	200003b4 	.word	0x200003b4

08002058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <HAL_GetTick+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	200003b4 	.word	0x200003b4

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	@ (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	@ (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	@ 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	@ (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff29 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002238:	f7ff ff3e 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 800223c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f7ff ff8e 	bl	8002164 <NVIC_EncodePriority>
 8002248:	4602      	mov	r2, r0
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff5d 	bl	8002110 <__NVIC_SetPriority>
}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff31 	bl	80020d4 <__NVIC_EnableIRQ>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffa2 	bl	80021cc <SysTick_Config>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff feda 	bl	8002058 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e099      	b.n	80023e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d0:	e00f      	b.n	80022f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d2:	f7ff fec1 	bl	8002058 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d908      	bls.n	80022f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2203      	movs	r2, #3
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e078      	b.n	80023e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e8      	bne.n	80022d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4b38      	ldr	r3, [pc, #224]	@ (80023ec <HAL_DMA_Init+0x158>)
 800230c:	4013      	ands	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	2b04      	cmp	r3, #4
 800234a:	d107      	bne.n	800235c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002354:	4313      	orrs	r3, r2
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f023 0307 	bic.w	r3, r3, #7
 8002372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	2b04      	cmp	r3, #4
 8002384:	d117      	bne.n	80023b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fb01 	bl	80029a0 <DMA_CheckFifoParam>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2240      	movs	r2, #64	@ 0x40
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023b2:	2301      	movs	r3, #1
 80023b4:	e016      	b.n	80023e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fab8 	bl	8002934 <DMA_CalcBaseAndBitshift>
 80023c4:	4603      	mov	r3, r0
 80023c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023cc:	223f      	movs	r2, #63	@ 0x3f
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	f010803f 	.word	0xf010803f

080023f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_DMA_Start_IT+0x26>
 8002412:	2302      	movs	r3, #2
 8002414:	e040      	b.n	8002498 <HAL_DMA_Start_IT+0xa8>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d12f      	bne.n	800248a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fa4a 	bl	80028d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	223f      	movs	r2, #63	@ 0x3f
 800244a:	409a      	lsls	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0216 	orr.w	r2, r2, #22
 800245e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0208 	orr.w	r2, r2, #8
 8002476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e005      	b.n	8002496 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002492:	2302      	movs	r3, #2
 8002494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002496:	7dfb      	ldrb	r3, [r7, #23]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ae:	f7ff fdd3 	bl	8002058 <HAL_GetTick>
 80024b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d008      	beq.n	80024d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2280      	movs	r2, #128	@ 0x80
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e052      	b.n	8002578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0216 	bic.w	r2, r2, #22
 80024e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_DMA_Abort+0x62>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002522:	e013      	b.n	800254c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002524:	f7ff fd98 	bl	8002058 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b05      	cmp	r3, #5
 8002530:	d90c      	bls.n	800254c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2220      	movs	r2, #32
 8002536:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e015      	b.n	8002578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1e4      	bne.n	8002524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255e:	223f      	movs	r2, #63	@ 0x3f
 8002560:	409a      	lsls	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d004      	beq.n	800259e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2280      	movs	r2, #128	@ 0x80
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00c      	b.n	80025b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2205      	movs	r2, #5
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025d0:	4b8e      	ldr	r3, [pc, #568]	@ (800280c <HAL_DMA_IRQHandler+0x248>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002810 <HAL_DMA_IRQHandler+0x24c>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0a9b      	lsrs	r3, r3, #10
 80025dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	2208      	movs	r2, #8
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01a      	beq.n	8002630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0204 	bic.w	r2, r2, #4
 8002616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	2208      	movs	r2, #8
 800261e:	409a      	lsls	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	2201      	movs	r2, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	2201      	movs	r2, #1
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	f043 0202 	orr.w	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266a:	2204      	movs	r2, #4
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	2204      	movs	r2, #4
 800268a:	409a      	lsls	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	2210      	movs	r2, #16
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d043      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d03c      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	2210      	movs	r2, #16
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d018      	beq.n	8002706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d024      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
 80026f2:	e01f      	b.n	8002734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e016      	b.n	8002734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0208 	bic.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002738:	2220      	movs	r2, #32
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 808f 	beq.w	8002864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8087 	beq.w	8002864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275a:	2220      	movs	r2, #32
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b05      	cmp	r3, #5
 800276c:	d136      	bne.n	80027dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0216 	bic.w	r2, r2, #22
 800277c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800278c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <HAL_DMA_IRQHandler+0x1da>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0208 	bic.w	r2, r2, #8
 80027ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	223f      	movs	r2, #63	@ 0x3f
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d07e      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
        }
        return;
 80027da:	e079      	b.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d031      	beq.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
 8002808:	e02c      	b.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
 800280a:	bf00      	nop
 800280c:	20000000 	.word	0x20000000
 8002810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d023      	beq.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
 8002824:	e01e      	b.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10f      	bne.n	8002854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0210 	bic.w	r2, r2, #16
 8002842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	2b00      	cmp	r3, #0
 800286a:	d032      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d022      	beq.n	80028be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2205      	movs	r2, #5
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	3301      	adds	r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	d307      	bcc.n	80028ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f2      	bne.n	8002890 <HAL_DMA_IRQHandler+0x2cc>
 80028aa:	e000      	b.n	80028ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
 80028ce:	e000      	b.n	80028d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028d0:	bf00      	nop
    }
  }
}
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b40      	cmp	r3, #64	@ 0x40
 8002904:	d108      	bne.n	8002918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002916:	e007      	b.n	8002928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	60da      	str	r2, [r3, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3b10      	subs	r3, #16
 8002944:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <DMA_CalcBaseAndBitshift+0x64>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800294e:	4a13      	ldr	r2, [pc, #76]	@ (800299c <DMA_CalcBaseAndBitshift+0x68>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d909      	bls.n	8002976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	1d1a      	adds	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	659a      	str	r2, [r3, #88]	@ 0x58
 8002974:	e007      	b.n	8002986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	aaaaaaab 	.word	0xaaaaaaab
 800299c:	08005320 	.word	0x08005320

080029a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11f      	bne.n	80029fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d856      	bhi.n	8002a6e <DMA_CheckFifoParam+0xce>
 80029c0:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <DMA_CheckFifoParam+0x28>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029eb 	.word	0x080029eb
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	08002a6f 	.word	0x08002a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d046      	beq.n	8002a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e043      	b.n	8002a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029f2:	d140      	bne.n	8002a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e03d      	b.n	8002a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a02:	d121      	bne.n	8002a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d837      	bhi.n	8002a7a <DMA_CheckFifoParam+0xda>
 8002a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <DMA_CheckFifoParam+0x70>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a27 	.word	0x08002a27
 8002a18:	08002a21 	.word	0x08002a21
 8002a1c:	08002a39 	.word	0x08002a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e030      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d025      	beq.n	8002a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e022      	b.n	8002a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a40:	d11f      	bne.n	8002a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a46:	e01c      	b.n	8002a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d903      	bls.n	8002a56 <DMA_CheckFifoParam+0xb6>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d003      	beq.n	8002a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a54:	e018      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5a:	e015      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e00b      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e00a      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e008      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e006      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e004      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
    }
  } 
  
  return status; 
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	@ 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e16b      	b.n	8002d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f040 815a 	bne.w	8002d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d005      	beq.n	8002aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d130      	bne.n	8002b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0201 	and.w	r2, r3, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d017      	beq.n	8002b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80b4 	beq.w	8002d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b60      	ldr	r3, [pc, #384]	@ (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	4a5f      	ldr	r2, [pc, #380]	@ (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002da8 <HAL_GPIO_Init+0x310>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a52      	ldr	r2, [pc, #328]	@ (8002dac <HAL_GPIO_Init+0x314>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02b      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a51      	ldr	r2, [pc, #324]	@ (8002db0 <HAL_GPIO_Init+0x318>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d025      	beq.n	8002cba <HAL_GPIO_Init+0x222>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a50      	ldr	r2, [pc, #320]	@ (8002db4 <HAL_GPIO_Init+0x31c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <HAL_GPIO_Init+0x21e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4f      	ldr	r2, [pc, #316]	@ (8002db8 <HAL_GPIO_Init+0x320>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0x21a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4e      	ldr	r2, [pc, #312]	@ (8002dbc <HAL_GPIO_Init+0x324>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0x216>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc0 <HAL_GPIO_Init+0x328>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_GPIO_Init+0x212>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc4 <HAL_GPIO_Init+0x32c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x20e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_GPIO_Init+0x20a>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e00e      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e00c      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e00a      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002caa:	2305      	movs	r3, #5
 8002cac:	e008      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f002 0203 	and.w	r2, r2, #3
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd0:	4935      	ldr	r1, [pc, #212]	@ (8002da8 <HAL_GPIO_Init+0x310>)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cde:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d02:	4a32      	ldr	r2, [pc, #200]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d08:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d2c:	4a27      	ldr	r2, [pc, #156]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d32:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d56:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d80:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b0f      	cmp	r3, #15
 8002d90:	f67f ae90 	bls.w	8002ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3724      	adds	r7, #36	@ 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40013800 	.word	0x40013800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40021400 	.word	0x40021400
 8002dc4:	40021800 	.word	0x40021800
 8002dc8:	40021c00 	.word	0x40021c00
 8002dcc:	40013c00 	.word	0x40013c00

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e267      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d075      	beq.n	8002eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dee:	4b88      	ldr	r3, [pc, #544]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d00c      	beq.n	8002e14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfa:	4b85      	ldr	r3, [pc, #532]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d112      	bne.n	8002e2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e06:	4b82      	ldr	r3, [pc, #520]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e12:	d10b      	bne.n	8002e2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	4b7e      	ldr	r3, [pc, #504]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d05b      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x108>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d157      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e242      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e34:	d106      	bne.n	8002e44 <HAL_RCC_OscConfig+0x74>
 8002e36:	4b76      	ldr	r3, [pc, #472]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a75      	ldr	r2, [pc, #468]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e01d      	b.n	8002e80 <HAL_RCC_OscConfig+0xb0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x98>
 8002e4e:	4b70      	ldr	r3, [pc, #448]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6f      	ldr	r2, [pc, #444]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0xb0>
 8002e68:	4b69      	ldr	r3, [pc, #420]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a68      	ldr	r2, [pc, #416]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b66      	ldr	r3, [pc, #408]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a65      	ldr	r2, [pc, #404]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7ff f8e6 	bl	8002058 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7ff f8e2 	bl	8002058 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e207      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0xc0>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7ff f8d2 	bl	8002058 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7ff f8ce 	bl	8002058 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1f3      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	4b51      	ldr	r3, [pc, #324]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xe8>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d063      	beq.n	8002fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef2:	4b47      	ldr	r3, [pc, #284]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d11c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efe:	4b44      	ldr	r3, [pc, #272]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_RCC_OscConfig+0x152>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e1c7      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4937      	ldr	r1, [pc, #220]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	e03a      	b.n	8002fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f40:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x244>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7ff f887 	bl	8002058 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7ff f883 	bl	8002058 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1a8      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4925      	ldr	r1, [pc, #148]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b24      	ldr	r3, [pc, #144]	@ (8003014 <HAL_RCC_OscConfig+0x244>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7ff f866 	bl	8002058 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f90:	f7ff f862 	bl	8002058 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e187      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d036      	beq.n	8003028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc2:	4b15      	ldr	r3, [pc, #84]	@ (8003018 <HAL_RCC_OscConfig+0x248>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7ff f846 	bl	8002058 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7ff f842 	bl	8002058 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e167      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x200>
 8002fee:	e01b      	b.n	8003028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_OscConfig+0x248>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7ff f82f 	bl	8002058 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	e00e      	b.n	800301c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7ff f82b 	bl	8002058 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d907      	bls.n	800301c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e150      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
 8003010:	40023800 	.word	0x40023800
 8003014:	42470000 	.word	0x42470000
 8003018:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	4b88      	ldr	r3, [pc, #544]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ea      	bne.n	8002ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8097 	beq.w	8003164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b81      	ldr	r3, [pc, #516]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b7d      	ldr	r3, [pc, #500]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	4a7c      	ldr	r2, [pc, #496]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	@ 0x40
 8003056:	4b7a      	ldr	r3, [pc, #488]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b77      	ldr	r3, [pc, #476]	@ (8003244 <HAL_RCC_OscConfig+0x474>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b74      	ldr	r3, [pc, #464]	@ (8003244 <HAL_RCC_OscConfig+0x474>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a73      	ldr	r2, [pc, #460]	@ (8003244 <HAL_RCC_OscConfig+0x474>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe ffeb 	bl	8002058 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe ffe7 	bl	8002058 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e10c      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b6a      	ldr	r3, [pc, #424]	@ (8003244 <HAL_RCC_OscConfig+0x474>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x2ea>
 80030ac:	4b64      	ldr	r3, [pc, #400]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a63      	ldr	r2, [pc, #396]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x324>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x30c>
 80030c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0x324>
 80030dc:	4b58      	ldr	r3, [pc, #352]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	4a57      	ldr	r2, [pc, #348]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e8:	4b55      	ldr	r3, [pc, #340]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	4a54      	ldr	r2, [pc, #336]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ee:	f023 0304 	bic.w	r3, r3, #4
 80030f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe ffac 	bl	8002058 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe ffa8 	bl	8002058 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0cb      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	4b49      	ldr	r3, [pc, #292]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ee      	beq.n	8003104 <HAL_RCC_OscConfig+0x334>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003128:	f7fe ff96 	bl	8002058 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe ff92 	bl	8002058 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0b5      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003146:	4b3e      	ldr	r3, [pc, #248]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ee      	bne.n	8003130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003158:	4b39      	ldr	r3, [pc, #228]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	4a38      	ldr	r2, [pc, #224]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003162:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a1 	beq.w	80032b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800316e:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b08      	cmp	r3, #8
 8003178:	d05c      	beq.n	8003234 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d141      	bne.n	8003206 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <HAL_RCC_OscConfig+0x478>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe ff66 	bl	8002058 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe ff62 	bl	8002058 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e087      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	491b      	ldr	r1, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x478>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe ff3b 	bl	8002058 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fe ff37 	bl	8002058 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e05c      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x416>
 8003204:	e054      	b.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_RCC_OscConfig+0x478>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe ff24 	bl	8002058 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe ff20 	bl	8002058 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e045      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x444>
 8003232:	e03d      	b.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e038      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
 8003240:	40023800 	.word	0x40023800
 8003244:	40007000 	.word	0x40007000
 8003248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800324c:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <HAL_RCC_OscConfig+0x4ec>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d028      	beq.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d121      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d11a      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	4293      	cmp	r3, r2
 8003286:	d111      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	3b01      	subs	r3, #1
 8003296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0cc      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d4:	4b68      	ldr	r3, [pc, #416]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d90c      	bls.n	80032fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b65      	ldr	r3, [pc, #404]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b63      	ldr	r3, [pc, #396]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0b8      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003314:	4b59      	ldr	r3, [pc, #356]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a58      	ldr	r2, [pc, #352]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800331e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800332c:	4b53      	ldr	r3, [pc, #332]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a52      	ldr	r2, [pc, #328]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003338:	4b50      	ldr	r3, [pc, #320]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	494d      	ldr	r1, [pc, #308]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d044      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b47      	ldr	r3, [pc, #284]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d119      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d003      	beq.n	800337e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337a:	2b03      	cmp	r3, #3
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b3f      	ldr	r3, [pc, #252]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	4b3b      	ldr	r3, [pc, #236]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e067      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339e:	4b37      	ldr	r3, [pc, #220]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 0203 	bic.w	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4934      	ldr	r1, [pc, #208]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b0:	f7fe fe52 	bl	8002058 <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b8:	f7fe fe4e 	bl	8002058 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e04f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	4b2b      	ldr	r3, [pc, #172]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 020c 	and.w	r2, r3, #12
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d1eb      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d20c      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b22      	ldr	r3, [pc, #136]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e032      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003414:	4b19      	ldr	r3, [pc, #100]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4916      	ldr	r1, [pc, #88]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003432:	4b12      	ldr	r3, [pc, #72]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	490e      	ldr	r1, [pc, #56]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003446:	f000 f821 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	490a      	ldr	r1, [pc, #40]	@ (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a09      	ldr	r2, [pc, #36]	@ (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003462:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fdb2 	bl	8001fd0 <HAL_InitTick>

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023c00 	.word	0x40023c00
 800347c:	40023800 	.word	0x40023800
 8003480:	08005308 	.word	0x08005308
 8003484:	20000000 	.word	0x20000000
 8003488:	20000004 	.word	0x20000004

0800348c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003490:	b090      	sub	sp, #64	@ 0x40
 8003492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a4:	4b59      	ldr	r3, [pc, #356]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d00d      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x40>
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	f200 80a1 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x34>
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034be:	e09b      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c0:	4b53      	ldr	r3, [pc, #332]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x184>)
 80034c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034c4:	e09b      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c6:	4b53      	ldr	r3, [pc, #332]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x188>)
 80034c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ca:	e098      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034cc:	4b4f      	ldr	r3, [pc, #316]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d6:	4b4d      	ldr	r3, [pc, #308]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d028      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b4a      	ldr	r3, [pc, #296]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	2200      	movs	r2, #0
 80034ea:	623b      	str	r3, [r7, #32]
 80034ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034f4:	2100      	movs	r1, #0
 80034f6:	4b47      	ldr	r3, [pc, #284]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x188>)
 80034f8:	fb03 f201 	mul.w	r2, r3, r1
 80034fc:	2300      	movs	r3, #0
 80034fe:	fb00 f303 	mul.w	r3, r0, r3
 8003502:	4413      	add	r3, r2
 8003504:	4a43      	ldr	r2, [pc, #268]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x188>)
 8003506:	fba0 1202 	umull	r1, r2, r0, r2
 800350a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800350c:	460a      	mov	r2, r1
 800350e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003512:	4413      	add	r3, r2
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003518:	2200      	movs	r2, #0
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	61fa      	str	r2, [r7, #28]
 800351e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003522:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003526:	f7fd fa99 	bl	8000a5c <__aeabi_uldivmod>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4613      	mov	r3, r2
 8003530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003532:	e053      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003534:	4b35      	ldr	r3, [pc, #212]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	2200      	movs	r2, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	617a      	str	r2, [r7, #20]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003546:	f04f 0b00 	mov.w	fp, #0
 800354a:	4652      	mov	r2, sl
 800354c:	465b      	mov	r3, fp
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	ebb2 080a 	subs.w	r8, r2, sl
 8003566:	eb63 090b 	sbc.w	r9, r3, fp
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003576:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800357a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800357e:	ebb2 0408 	subs.w	r4, r2, r8
 8003582:	eb63 0509 	sbc.w	r5, r3, r9
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	00eb      	lsls	r3, r5, #3
 8003590:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003594:	00e2      	lsls	r2, r4, #3
 8003596:	4614      	mov	r4, r2
 8003598:	461d      	mov	r5, r3
 800359a:	eb14 030a 	adds.w	r3, r4, sl
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	eb45 030b 	adc.w	r3, r5, fp
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b2:	4629      	mov	r1, r5
 80035b4:	028b      	lsls	r3, r1, #10
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035bc:	4621      	mov	r1, r4
 80035be:	028a      	lsls	r2, r1, #10
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c6:	2200      	movs	r2, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	60fa      	str	r2, [r7, #12]
 80035cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d0:	f7fd fa44 	bl	8000a5c <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x184>)
 80035fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003600:	4618      	mov	r0, r3
 8003602:	3740      	adds	r7, #64	@ 0x40
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	017d7840 	.word	0x017d7840

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <HAL_RCC_GetHCLKFreq+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000000 	.word	0x20000000

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003634:	f7ff fff0 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	@ (8003654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	08005318 	.word	0x08005318

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800365c:	f7ff ffdc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	@ (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08005318 	.word	0x08005318

08003680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e042      	b.n	8003718 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe fbc2 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	@ 0x24
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fe6b 	bl	80043a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b20      	cmp	r3, #32
 8003738:	d112      	bne.n	8003760 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_UART_Receive_DMA+0x26>
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e00b      	b.n	8003762 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	461a      	mov	r2, r3
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fbc2 	bl	8003ee0 <UART_Start_Receive_DMA>
 800375c:	4603      	mov	r3, r0
 800375e:	e000      	b.n	8003762 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003760:	2302      	movs	r3, #2
  }
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b0ba      	sub	sp, #232	@ 0xe8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10f      	bne.n	80037d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_UART_IRQHandler+0x66>
 80037be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fd29 	bl	8004222 <UART_Receive_IT>
      return;
 80037d0:	e25b      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80de 	beq.w	8003998 <HAL_UART_IRQHandler+0x22c>
 80037dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80d1 	beq.w	8003998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_UART_IRQHandler+0xae>
 8003802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_UART_IRQHandler+0xd2>
 8003826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_UART_IRQHandler+0xf6>
 800384a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d011      	beq.n	8003892 <HAL_UART_IRQHandler+0x126>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0208 	orr.w	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 81f2 	beq.w	8003c80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_UART_IRQHandler+0x14e>
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fcb4 	bl	8004222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_UART_IRQHandler+0x17a>
 80038de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d04f      	beq.n	8003986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fbbc 	bl	8004064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d141      	bne.n	800397e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003926:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800392a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800393e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1d9      	bne.n	80038fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	4a7e      	ldr	r2, [pc, #504]	@ (8003b4c <HAL_UART_IRQHandler+0x3e0>)
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fe10 	bl	8002580 <HAL_DMA_Abort_IT>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003970:	4610      	mov	r0, r2
 8003972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e00e      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f99e 	bl	8003cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	e00a      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f99a 	bl	8003cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	e006      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f996 	bl	8003cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003992:	e175      	b.n	8003c80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	bf00      	nop
    return;
 8003996:	e173      	b.n	8003c80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	2b01      	cmp	r3, #1
 800399e:	f040 814f 	bne.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8148 	beq.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8141 	beq.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	f040 80b6 	bne.w	8003b50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8145 	beq.w	8003c84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a02:	429a      	cmp	r2, r3
 8003a04:	f080 813e 	bcs.w	8003c84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1a:	f000 8088 	beq.w	8003b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1d9      	bne.n	8003a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e1      	bne.n	8003a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3314      	adds	r3, #20
 8003ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ad0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e3      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003afe:	f023 0310 	bic.w	r3, r3, #16
 8003b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e3      	bne.n	8003aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fcb9 	bl	80024a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f8c1 	bl	8003ccc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b4a:	e09b      	b.n	8003c84 <HAL_UART_IRQHandler+0x518>
 8003b4c:	0800412b 	.word	0x0800412b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 808e 	beq.w	8003c88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8089 	beq.w	8003c88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e3      	bne.n	8003b76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e3      	bne.n	8003bae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0310 	bic.w	r3, r3, #16
 8003c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	617b      	str	r3, [r7, #20]
   return(result);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e3      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f847 	bl	8003ccc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c3e:	e023      	b.n	8003c88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_UART_IRQHandler+0x4f4>
 8003c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fa7a 	bl	8004152 <UART_Transmit_IT>
    return;
 8003c5e:	e014      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <HAL_UART_IRQHandler+0x51e>
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 faba 	bl	80041f2 <UART_EndTransmit_IT>
    return;
 8003c7e:	e004      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c80:	bf00      	nop
 8003c82:	e002      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c88:	bf00      	nop
  }
}
 8003c8a:	37e8      	adds	r7, #232	@ 0xe8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b09c      	sub	sp, #112	@ 0x70
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d172      	bne.n	8003de6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d02:	2200      	movs	r2, #0
 8003d04:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d26:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d28:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e5      	bne.n	8003d06 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e5      	bne.n	8003d3a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d119      	bne.n	8003de6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f023 0310 	bic.w	r3, r3, #16
 8003dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003dd2:	61fa      	str	r2, [r7, #28]
 8003dd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	617b      	str	r3, [r7, #20]
   return(result);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e5      	bne.n	8003db2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003de8:	2200      	movs	r2, #0
 8003dea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d106      	bne.n	8003e02 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003dfc:	f7ff ff66 	bl	8003ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e00:	e002      	b.n	8003e08 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003e02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e04:	f7fd fe1e 	bl	8001a44 <HAL_UART_RxCpltCallback>
}
 8003e08:	bf00      	nop
 8003e0a:	3770      	adds	r7, #112	@ 0x70
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d108      	bne.n	8003e3e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff ff48 	bl	8003ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e3c:	e002      	b.n	8003e44 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff ff30 	bl	8003ca4 <HAL_UART_RxHalfCpltCallback>
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	2b80      	cmp	r3, #128	@ 0x80
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b21      	cmp	r3, #33	@ 0x21
 8003e7e:	d108      	bne.n	8003e92 <UART_DMAError+0x46>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003e8c:	68b8      	ldr	r0, [r7, #8]
 8003e8e:	f000 f8c1 	bl	8004014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9c:	2b40      	cmp	r3, #64	@ 0x40
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b22      	cmp	r3, #34	@ 0x22
 8003eb2:	d108      	bne.n	8003ec6 <UART_DMAError+0x7a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003ec0:	68b8      	ldr	r0, [r7, #8]
 8003ec2:	f000 f8cf 	bl	8004064 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	f043 0210 	orr.w	r2, r3, #16
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed2:	68b8      	ldr	r0, [r7, #8]
 8003ed4:	f7ff fef0 	bl	8003cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b098      	sub	sp, #96	@ 0x60
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2222      	movs	r2, #34	@ 0x22
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004008 <UART_Start_Receive_DMA+0x128>)
 8003f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	4a3d      	ldr	r2, [pc, #244]	@ (800400c <UART_Start_Receive_DMA+0x12c>)
 8003f16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004010 <UART_Start_Receive_DMA+0x130>)
 8003f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f24:	2200      	movs	r2, #0
 8003f26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	f7fe fa56 	bl	80023f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d019      	beq.n	8003f96 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3314      	adds	r3, #20
 8003f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fb6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e5      	bne.n	8003f96 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fe0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fea:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6a39      	ldr	r1, [r7, #32]
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e5      	bne.n	8003fca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3760      	adds	r7, #96	@ 0x60
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	08003ce5 	.word	0x08003ce5
 800400c:	08003e11 	.word	0x08003e11
 8004010:	08003e4d 	.word	0x08003e4d

08004014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	@ 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	60bb      	str	r3, [r7, #8]
   return(result);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	61ba      	str	r2, [r7, #24]
 800403e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6979      	ldr	r1, [r7, #20]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	613b      	str	r3, [r7, #16]
   return(result);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004058:	bf00      	nop
 800405a:	3724      	adds	r7, #36	@ 0x24
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b095      	sub	sp, #84	@ 0x54
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800408c:	643a      	str	r2, [r7, #64]	@ 0x40
 800408e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e5      	bne.n	800406c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d119      	bne.n	8004110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 0310 	bic.w	r3, r3, #16
 80040f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040fc:	61ba      	str	r2, [r7, #24]
 80040fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6979      	ldr	r1, [r7, #20]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	613b      	str	r3, [r7, #16]
   return(result);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800411e:	bf00      	nop
 8004120:	3754      	adds	r7, #84	@ 0x54
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff fdb7 	bl	8003cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b21      	cmp	r3, #33	@ 0x21
 8004164:	d13e      	bne.n	80041e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800416e:	d114      	bne.n	800419a <UART_Transmit_IT+0x48>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d110      	bne.n	800419a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800418c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	1c9a      	adds	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	621a      	str	r2, [r3, #32]
 8004198:	e008      	b.n	80041ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	1c59      	adds	r1, r3, #1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6211      	str	r1, [r2, #32]
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4619      	mov	r1, r3
 80041ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10f      	bne.n	80041e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e000      	b.n	80041e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fd3c 	bl	8003c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b08c      	sub	sp, #48	@ 0x30
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b22      	cmp	r3, #34	@ 0x22
 8004234:	f040 80ae 	bne.w	8004394 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004240:	d117      	bne.n	8004272 <UART_Receive_IT+0x50>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d113      	bne.n	8004272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004252:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	b29a      	uxth	r2, r3
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004270:	e026      	b.n	80042c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004284:	d007      	beq.n	8004296 <UART_Receive_IT+0x74>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <UART_Receive_IT+0x82>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e008      	b.n	80042b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	4619      	mov	r1, r3
 80042ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d15d      	bne.n	8004390 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0220 	bic.w	r2, r2, #32
 80042e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	2b01      	cmp	r3, #1
 8004318:	d135      	bne.n	8004386 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	613b      	str	r3, [r7, #16]
   return(result);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 0310 	bic.w	r3, r3, #16
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004340:	623a      	str	r2, [r7, #32]
 8004342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	6a3a      	ldr	r2, [r7, #32]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	61bb      	str	r3, [r7, #24]
   return(result);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e5      	bne.n	8004320 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b10      	cmp	r3, #16
 8004360:	d10a      	bne.n	8004378 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fca4 	bl	8003ccc <HAL_UARTEx_RxEventCallback>
 8004384:	e002      	b.n	800438c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd fb5c 	bl	8001a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e002      	b.n	8004396 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3730      	adds	r7, #48	@ 0x30
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a4:	b0c0      	sub	sp, #256	@ 0x100
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	68d9      	ldr	r1, [r3, #12]
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	ea40 0301 	orr.w	r3, r0, r1
 80043c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	431a      	orrs	r2, r3
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043f8:	f021 010c 	bic.w	r1, r1, #12
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004406:	430b      	orrs	r3, r1
 8004408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441a:	6999      	ldr	r1, [r3, #24]
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	ea40 0301 	orr.w	r3, r0, r1
 8004426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b8f      	ldr	r3, [pc, #572]	@ (800466c <UART_SetConfig+0x2cc>)
 8004430:	429a      	cmp	r2, r3
 8004432:	d005      	beq.n	8004440 <UART_SetConfig+0xa0>
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b8d      	ldr	r3, [pc, #564]	@ (8004670 <UART_SetConfig+0x2d0>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d104      	bne.n	800444a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004440:	f7ff f90a 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 8004444:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004448:	e003      	b.n	8004452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800444a:	f7ff f8f1 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 800444e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445c:	f040 810c 	bne.w	8004678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800446a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800446e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004472:	4622      	mov	r2, r4
 8004474:	462b      	mov	r3, r5
 8004476:	1891      	adds	r1, r2, r2
 8004478:	65b9      	str	r1, [r7, #88]	@ 0x58
 800447a:	415b      	adcs	r3, r3
 800447c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800447e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004482:	4621      	mov	r1, r4
 8004484:	eb12 0801 	adds.w	r8, r2, r1
 8004488:	4629      	mov	r1, r5
 800448a:	eb43 0901 	adc.w	r9, r3, r1
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800449e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a2:	4690      	mov	r8, r2
 80044a4:	4699      	mov	r9, r3
 80044a6:	4623      	mov	r3, r4
 80044a8:	eb18 0303 	adds.w	r3, r8, r3
 80044ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044b0:	462b      	mov	r3, r5
 80044b2:	eb49 0303 	adc.w	r3, r9, r3
 80044b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044ce:	460b      	mov	r3, r1
 80044d0:	18db      	adds	r3, r3, r3
 80044d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d4:	4613      	mov	r3, r2
 80044d6:	eb42 0303 	adc.w	r3, r2, r3
 80044da:	657b      	str	r3, [r7, #84]	@ 0x54
 80044dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044e4:	f7fc faba 	bl	8000a5c <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4b61      	ldr	r3, [pc, #388]	@ (8004674 <UART_SetConfig+0x2d4>)
 80044ee:	fba3 2302 	umull	r2, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	011c      	lsls	r4, r3, #4
 80044f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004500:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004510:	415b      	adcs	r3, r3
 8004512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004518:	4641      	mov	r1, r8
 800451a:	eb12 0a01 	adds.w	sl, r2, r1
 800451e:	4649      	mov	r1, r9
 8004520:	eb43 0b01 	adc.w	fp, r3, r1
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004538:	4692      	mov	sl, r2
 800453a:	469b      	mov	fp, r3
 800453c:	4643      	mov	r3, r8
 800453e:	eb1a 0303 	adds.w	r3, sl, r3
 8004542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004546:	464b      	mov	r3, r9
 8004548:	eb4b 0303 	adc.w	r3, fp, r3
 800454c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800455c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004564:	460b      	mov	r3, r1
 8004566:	18db      	adds	r3, r3, r3
 8004568:	643b      	str	r3, [r7, #64]	@ 0x40
 800456a:	4613      	mov	r3, r2
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	647b      	str	r3, [r7, #68]	@ 0x44
 8004572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800457a:	f7fc fa6f 	bl	8000a5c <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4611      	mov	r1, r2
 8004584:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <UART_SetConfig+0x2d4>)
 8004586:	fba3 2301 	umull	r2, r3, r3, r1
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2264      	movs	r2, #100	@ 0x64
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	1acb      	subs	r3, r1, r3
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800459a:	4b36      	ldr	r3, [pc, #216]	@ (8004674 <UART_SetConfig+0x2d4>)
 800459c:	fba3 2302 	umull	r2, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045a8:	441c      	add	r4, r3
 80045aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045c4:	415b      	adcs	r3, r3
 80045c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045cc:	4641      	mov	r1, r8
 80045ce:	1851      	adds	r1, r2, r1
 80045d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045e4:	4659      	mov	r1, fp
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4651      	mov	r1, sl
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4651      	mov	r1, sl
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4642      	mov	r2, r8
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004600:	464b      	mov	r3, r9
 8004602:	460a      	mov	r2, r1
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004618:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800461c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004620:	460b      	mov	r3, r1
 8004622:	18db      	adds	r3, r3, r3
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004626:	4613      	mov	r3, r2
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004636:	f7fc fa11 	bl	8000a5c <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <UART_SetConfig+0x2d4>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	@ 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	3332      	adds	r3, #50	@ 0x32
 8004652:	4a08      	ldr	r2, [pc, #32]	@ (8004674 <UART_SetConfig+0x2d4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	f003 0207 	and.w	r2, r3, #7
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4422      	add	r2, r4
 8004666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004668:	e106      	b.n	8004878 <UART_SetConfig+0x4d8>
 800466a:	bf00      	nop
 800466c:	40011000 	.word	0x40011000
 8004670:	40011400 	.word	0x40011400
 8004674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004682:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800468a:	4642      	mov	r2, r8
 800468c:	464b      	mov	r3, r9
 800468e:	1891      	adds	r1, r2, r2
 8004690:	6239      	str	r1, [r7, #32]
 8004692:	415b      	adcs	r3, r3
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
 8004696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800469a:	4641      	mov	r1, r8
 800469c:	1854      	adds	r4, r2, r1
 800469e:	4649      	mov	r1, r9
 80046a0:	eb43 0501 	adc.w	r5, r3, r1
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	00eb      	lsls	r3, r5, #3
 80046ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b2:	00e2      	lsls	r2, r4, #3
 80046b4:	4614      	mov	r4, r2
 80046b6:	461d      	mov	r5, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	18e3      	adds	r3, r4, r3
 80046bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046c0:	464b      	mov	r3, r9
 80046c2:	eb45 0303 	adc.w	r3, r5, r3
 80046c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046e6:	4629      	mov	r1, r5
 80046e8:	008b      	lsls	r3, r1, #2
 80046ea:	4621      	mov	r1, r4
 80046ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f0:	4621      	mov	r1, r4
 80046f2:	008a      	lsls	r2, r1, #2
 80046f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046f8:	f7fc f9b0 	bl	8000a5c <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4b60      	ldr	r3, [pc, #384]	@ (8004884 <UART_SetConfig+0x4e4>)
 8004702:	fba3 2302 	umull	r2, r3, r3, r2
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	011c      	lsls	r4, r3, #4
 800470a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800471c:	4642      	mov	r2, r8
 800471e:	464b      	mov	r3, r9
 8004720:	1891      	adds	r1, r2, r2
 8004722:	61b9      	str	r1, [r7, #24]
 8004724:	415b      	adcs	r3, r3
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800472c:	4641      	mov	r1, r8
 800472e:	1851      	adds	r1, r2, r1
 8004730:	6139      	str	r1, [r7, #16]
 8004732:	4649      	mov	r1, r9
 8004734:	414b      	adcs	r3, r1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004744:	4659      	mov	r1, fp
 8004746:	00cb      	lsls	r3, r1, #3
 8004748:	4651      	mov	r1, sl
 800474a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474e:	4651      	mov	r1, sl
 8004750:	00ca      	lsls	r2, r1, #3
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	4603      	mov	r3, r0
 8004758:	4642      	mov	r2, r8
 800475a:	189b      	adds	r3, r3, r2
 800475c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004760:	464b      	mov	r3, r9
 8004762:	460a      	mov	r2, r1
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004776:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004784:	4649      	mov	r1, r9
 8004786:	008b      	lsls	r3, r1, #2
 8004788:	4641      	mov	r1, r8
 800478a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478e:	4641      	mov	r1, r8
 8004790:	008a      	lsls	r2, r1, #2
 8004792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004796:	f7fc f961 	bl	8000a5c <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	4b38      	ldr	r3, [pc, #224]	@ (8004884 <UART_SetConfig+0x4e4>)
 80047a2:	fba3 2301 	umull	r2, r3, r3, r1
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2264      	movs	r2, #100	@ 0x64
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	1acb      	subs	r3, r1, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	@ 0x32
 80047b4:	4a33      	ldr	r2, [pc, #204]	@ (8004884 <UART_SetConfig+0x4e4>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c0:	441c      	add	r4, r3
 80047c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c6:	2200      	movs	r2, #0
 80047c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80047ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80047cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	1891      	adds	r1, r2, r2
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	415b      	adcs	r3, r3
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e0:	4641      	mov	r1, r8
 80047e2:	1851      	adds	r1, r2, r1
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	4649      	mov	r1, r9
 80047e8:	414b      	adcs	r3, r1
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047f8:	4659      	mov	r1, fp
 80047fa:	00cb      	lsls	r3, r1, #3
 80047fc:	4651      	mov	r1, sl
 80047fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004802:	4651      	mov	r1, sl
 8004804:	00ca      	lsls	r2, r1, #3
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	4603      	mov	r3, r0
 800480c:	4642      	mov	r2, r8
 800480e:	189b      	adds	r3, r3, r2
 8004810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004812:	464b      	mov	r3, r9
 8004814:	460a      	mov	r2, r1
 8004816:	eb42 0303 	adc.w	r3, r2, r3
 800481a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	663b      	str	r3, [r7, #96]	@ 0x60
 8004826:	667a      	str	r2, [r7, #100]	@ 0x64
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004834:	4649      	mov	r1, r9
 8004836:	008b      	lsls	r3, r1, #2
 8004838:	4641      	mov	r1, r8
 800483a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483e:	4641      	mov	r1, r8
 8004840:	008a      	lsls	r2, r1, #2
 8004842:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004846:	f7fc f909 	bl	8000a5c <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <UART_SetConfig+0x4e4>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	@ 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	3332      	adds	r3, #50	@ 0x32
 8004862:	4a08      	ldr	r2, [pc, #32]	@ (8004884 <UART_SetConfig+0x4e4>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f003 020f 	and.w	r2, r3, #15
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4422      	add	r2, r4
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800487e:	46bd      	mov	sp, r7
 8004880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004884:	51eb851f 	.word	0x51eb851f

08004888 <_vsniprintf_r>:
 8004888:	b530      	push	{r4, r5, lr}
 800488a:	4614      	mov	r4, r2
 800488c:	2c00      	cmp	r4, #0
 800488e:	b09b      	sub	sp, #108	@ 0x6c
 8004890:	4605      	mov	r5, r0
 8004892:	461a      	mov	r2, r3
 8004894:	da05      	bge.n	80048a2 <_vsniprintf_r+0x1a>
 8004896:	238b      	movs	r3, #139	@ 0x8b
 8004898:	6003      	str	r3, [r0, #0]
 800489a:	f04f 30ff 	mov.w	r0, #4294967295
 800489e:	b01b      	add	sp, #108	@ 0x6c
 80048a0:	bd30      	pop	{r4, r5, pc}
 80048a2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80048a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	9319      	str	r3, [sp, #100]	@ 0x64
 80048b0:	bf14      	ite	ne
 80048b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80048b6:	4623      	moveq	r3, r4
 80048b8:	9302      	str	r3, [sp, #8]
 80048ba:	9305      	str	r3, [sp, #20]
 80048bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048c0:	9100      	str	r1, [sp, #0]
 80048c2:	9104      	str	r1, [sp, #16]
 80048c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80048c8:	4669      	mov	r1, sp
 80048ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80048cc:	f000 f9c0 	bl	8004c50 <_svfiprintf_r>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	bfbc      	itt	lt
 80048d4:	238b      	movlt	r3, #139	@ 0x8b
 80048d6:	602b      	strlt	r3, [r5, #0]
 80048d8:	2c00      	cmp	r4, #0
 80048da:	d0e0      	beq.n	800489e <_vsniprintf_r+0x16>
 80048dc:	9b00      	ldr	r3, [sp, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	e7dc      	b.n	800489e <_vsniprintf_r+0x16>

080048e4 <vsniprintf>:
 80048e4:	b507      	push	{r0, r1, r2, lr}
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	460a      	mov	r2, r1
 80048ec:	4601      	mov	r1, r0
 80048ee:	4803      	ldr	r0, [pc, #12]	@ (80048fc <vsniprintf+0x18>)
 80048f0:	6800      	ldr	r0, [r0, #0]
 80048f2:	f7ff ffc9 	bl	8004888 <_vsniprintf_r>
 80048f6:	b003      	add	sp, #12
 80048f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80048fc:	2000000c 	.word	0x2000000c

08004900 <memset>:
 8004900:	4402      	add	r2, r0
 8004902:	4603      	mov	r3, r0
 8004904:	4293      	cmp	r3, r2
 8004906:	d100      	bne.n	800490a <memset+0xa>
 8004908:	4770      	bx	lr
 800490a:	f803 1b01 	strb.w	r1, [r3], #1
 800490e:	e7f9      	b.n	8004904 <memset+0x4>

08004910 <strncmp>:
 8004910:	b510      	push	{r4, lr}
 8004912:	b16a      	cbz	r2, 8004930 <strncmp+0x20>
 8004914:	3901      	subs	r1, #1
 8004916:	1884      	adds	r4, r0, r2
 8004918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800491c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004920:	429a      	cmp	r2, r3
 8004922:	d103      	bne.n	800492c <strncmp+0x1c>
 8004924:	42a0      	cmp	r0, r4
 8004926:	d001      	beq.n	800492c <strncmp+0x1c>
 8004928:	2a00      	cmp	r2, #0
 800492a:	d1f5      	bne.n	8004918 <strncmp+0x8>
 800492c:	1ad0      	subs	r0, r2, r3
 800492e:	bd10      	pop	{r4, pc}
 8004930:	4610      	mov	r0, r2
 8004932:	e7fc      	b.n	800492e <strncmp+0x1e>

08004934 <__errno>:
 8004934:	4b01      	ldr	r3, [pc, #4]	@ (800493c <__errno+0x8>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	2000000c 	.word	0x2000000c

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4d0d      	ldr	r5, [pc, #52]	@ (8004978 <__libc_init_array+0x38>)
 8004944:	4c0d      	ldr	r4, [pc, #52]	@ (800497c <__libc_init_array+0x3c>)
 8004946:	1b64      	subs	r4, r4, r5
 8004948:	10a4      	asrs	r4, r4, #2
 800494a:	2600      	movs	r6, #0
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	4d0b      	ldr	r5, [pc, #44]	@ (8004980 <__libc_init_array+0x40>)
 8004952:	4c0c      	ldr	r4, [pc, #48]	@ (8004984 <__libc_init_array+0x44>)
 8004954:	f000 fc64 	bl	8005220 <_init>
 8004958:	1b64      	subs	r4, r4, r5
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	2600      	movs	r6, #0
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	08005364 	.word	0x08005364
 800497c:	08005364 	.word	0x08005364
 8004980:	08005364 	.word	0x08005364
 8004984:	08005368 	.word	0x08005368

08004988 <__retarget_lock_acquire_recursive>:
 8004988:	4770      	bx	lr

0800498a <__retarget_lock_release_recursive>:
 800498a:	4770      	bx	lr

0800498c <memcpy>:
 800498c:	440a      	add	r2, r1
 800498e:	4291      	cmp	r1, r2
 8004990:	f100 33ff 	add.w	r3, r0, #4294967295
 8004994:	d100      	bne.n	8004998 <memcpy+0xc>
 8004996:	4770      	bx	lr
 8004998:	b510      	push	{r4, lr}
 800499a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a2:	4291      	cmp	r1, r2
 80049a4:	d1f9      	bne.n	800499a <memcpy+0xe>
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <_free_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4605      	mov	r5, r0
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d041      	beq.n	8004a34 <_free_r+0x8c>
 80049b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b4:	1f0c      	subs	r4, r1, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bfb8      	it	lt
 80049ba:	18e4      	addlt	r4, r4, r3
 80049bc:	f000 f8e0 	bl	8004b80 <__malloc_lock>
 80049c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a38 <_free_r+0x90>)
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	b933      	cbnz	r3, 80049d4 <_free_r+0x2c>
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	6014      	str	r4, [r2, #0]
 80049ca:	4628      	mov	r0, r5
 80049cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d0:	f000 b8dc 	b.w	8004b8c <__malloc_unlock>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d908      	bls.n	80049ea <_free_r+0x42>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	1821      	adds	r1, r4, r0
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf01      	itttt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	1809      	addeq	r1, r1, r0
 80049e6:	6021      	streq	r1, [r4, #0]
 80049e8:	e7ed      	b.n	80049c6 <_free_r+0x1e>
 80049ea:	461a      	mov	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b10b      	cbz	r3, 80049f4 <_free_r+0x4c>
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d9fa      	bls.n	80049ea <_free_r+0x42>
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	1850      	adds	r0, r2, r1
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d10b      	bne.n	8004a14 <_free_r+0x6c>
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	4401      	add	r1, r0
 8004a00:	1850      	adds	r0, r2, r1
 8004a02:	4283      	cmp	r3, r0
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	d1e0      	bne.n	80049ca <_free_r+0x22>
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	6053      	str	r3, [r2, #4]
 8004a0e:	4408      	add	r0, r1
 8004a10:	6010      	str	r0, [r2, #0]
 8004a12:	e7da      	b.n	80049ca <_free_r+0x22>
 8004a14:	d902      	bls.n	8004a1c <_free_r+0x74>
 8004a16:	230c      	movs	r3, #12
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	e7d6      	b.n	80049ca <_free_r+0x22>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	1821      	adds	r1, r4, r0
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf04      	itt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	bf04      	itt	eq
 8004a2c:	1809      	addeq	r1, r1, r0
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	6054      	str	r4, [r2, #4]
 8004a32:	e7ca      	b.n	80049ca <_free_r+0x22>
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
 8004a36:	bf00      	nop
 8004a38:	200004fc 	.word	0x200004fc

08004a3c <sbrk_aligned>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a7c <sbrk_aligned+0x40>)
 8004a40:	460c      	mov	r4, r1
 8004a42:	6831      	ldr	r1, [r6, #0]
 8004a44:	4605      	mov	r5, r0
 8004a46:	b911      	cbnz	r1, 8004a4e <sbrk_aligned+0x12>
 8004a48:	f000 fba4 	bl	8005194 <_sbrk_r>
 8004a4c:	6030      	str	r0, [r6, #0]
 8004a4e:	4621      	mov	r1, r4
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fb9f 	bl	8005194 <_sbrk_r>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	d103      	bne.n	8004a62 <sbrk_aligned+0x26>
 8004a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a5e:	4620      	mov	r0, r4
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
 8004a62:	1cc4      	adds	r4, r0, #3
 8004a64:	f024 0403 	bic.w	r4, r4, #3
 8004a68:	42a0      	cmp	r0, r4
 8004a6a:	d0f8      	beq.n	8004a5e <sbrk_aligned+0x22>
 8004a6c:	1a21      	subs	r1, r4, r0
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 fb90 	bl	8005194 <_sbrk_r>
 8004a74:	3001      	adds	r0, #1
 8004a76:	d1f2      	bne.n	8004a5e <sbrk_aligned+0x22>
 8004a78:	e7ef      	b.n	8004a5a <sbrk_aligned+0x1e>
 8004a7a:	bf00      	nop
 8004a7c:	200004f8 	.word	0x200004f8

08004a80 <_malloc_r>:
 8004a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a84:	1ccd      	adds	r5, r1, #3
 8004a86:	f025 0503 	bic.w	r5, r5, #3
 8004a8a:	3508      	adds	r5, #8
 8004a8c:	2d0c      	cmp	r5, #12
 8004a8e:	bf38      	it	cc
 8004a90:	250c      	movcc	r5, #12
 8004a92:	2d00      	cmp	r5, #0
 8004a94:	4606      	mov	r6, r0
 8004a96:	db01      	blt.n	8004a9c <_malloc_r+0x1c>
 8004a98:	42a9      	cmp	r1, r5
 8004a9a:	d904      	bls.n	8004aa6 <_malloc_r+0x26>
 8004a9c:	230c      	movs	r3, #12
 8004a9e:	6033      	str	r3, [r6, #0]
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b7c <_malloc_r+0xfc>
 8004aaa:	f000 f869 	bl	8004b80 <__malloc_lock>
 8004aae:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab2:	461c      	mov	r4, r3
 8004ab4:	bb44      	cbnz	r4, 8004b08 <_malloc_r+0x88>
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f7ff ffbf 	bl	8004a3c <sbrk_aligned>
 8004abe:	1c43      	adds	r3, r0, #1
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	d158      	bne.n	8004b76 <_malloc_r+0xf6>
 8004ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ac8:	4627      	mov	r7, r4
 8004aca:	2f00      	cmp	r7, #0
 8004acc:	d143      	bne.n	8004b56 <_malloc_r+0xd6>
 8004ace:	2c00      	cmp	r4, #0
 8004ad0:	d04b      	beq.n	8004b6a <_malloc_r+0xea>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	4639      	mov	r1, r7
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	eb04 0903 	add.w	r9, r4, r3
 8004adc:	f000 fb5a 	bl	8005194 <_sbrk_r>
 8004ae0:	4581      	cmp	r9, r0
 8004ae2:	d142      	bne.n	8004b6a <_malloc_r+0xea>
 8004ae4:	6821      	ldr	r1, [r4, #0]
 8004ae6:	1a6d      	subs	r5, r5, r1
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ffa6 	bl	8004a3c <sbrk_aligned>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d03a      	beq.n	8004b6a <_malloc_r+0xea>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	442b      	add	r3, r5
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	f8d8 3000 	ldr.w	r3, [r8]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	bb62      	cbnz	r2, 8004b5c <_malloc_r+0xdc>
 8004b02:	f8c8 7000 	str.w	r7, [r8]
 8004b06:	e00f      	b.n	8004b28 <_malloc_r+0xa8>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	1b52      	subs	r2, r2, r5
 8004b0c:	d420      	bmi.n	8004b50 <_malloc_r+0xd0>
 8004b0e:	2a0b      	cmp	r2, #11
 8004b10:	d917      	bls.n	8004b42 <_malloc_r+0xc2>
 8004b12:	1961      	adds	r1, r4, r5
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	6025      	str	r5, [r4, #0]
 8004b18:	bf18      	it	ne
 8004b1a:	6059      	strne	r1, [r3, #4]
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	bf08      	it	eq
 8004b20:	f8c8 1000 	streq.w	r1, [r8]
 8004b24:	5162      	str	r2, [r4, r5]
 8004b26:	604b      	str	r3, [r1, #4]
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f000 f82f 	bl	8004b8c <__malloc_unlock>
 8004b2e:	f104 000b 	add.w	r0, r4, #11
 8004b32:	1d23      	adds	r3, r4, #4
 8004b34:	f020 0007 	bic.w	r0, r0, #7
 8004b38:	1ac2      	subs	r2, r0, r3
 8004b3a:	bf1c      	itt	ne
 8004b3c:	1a1b      	subne	r3, r3, r0
 8004b3e:	50a3      	strne	r3, [r4, r2]
 8004b40:	e7af      	b.n	8004aa2 <_malloc_r+0x22>
 8004b42:	6862      	ldr	r2, [r4, #4]
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	bf0c      	ite	eq
 8004b48:	f8c8 2000 	streq.w	r2, [r8]
 8004b4c:	605a      	strne	r2, [r3, #4]
 8004b4e:	e7eb      	b.n	8004b28 <_malloc_r+0xa8>
 8004b50:	4623      	mov	r3, r4
 8004b52:	6864      	ldr	r4, [r4, #4]
 8004b54:	e7ae      	b.n	8004ab4 <_malloc_r+0x34>
 8004b56:	463c      	mov	r4, r7
 8004b58:	687f      	ldr	r7, [r7, #4]
 8004b5a:	e7b6      	b.n	8004aca <_malloc_r+0x4a>
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	42a3      	cmp	r3, r4
 8004b62:	d1fb      	bne.n	8004b5c <_malloc_r+0xdc>
 8004b64:	2300      	movs	r3, #0
 8004b66:	6053      	str	r3, [r2, #4]
 8004b68:	e7de      	b.n	8004b28 <_malloc_r+0xa8>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f000 f80c 	bl	8004b8c <__malloc_unlock>
 8004b74:	e794      	b.n	8004aa0 <_malloc_r+0x20>
 8004b76:	6005      	str	r5, [r0, #0]
 8004b78:	e7d6      	b.n	8004b28 <_malloc_r+0xa8>
 8004b7a:	bf00      	nop
 8004b7c:	200004fc 	.word	0x200004fc

08004b80 <__malloc_lock>:
 8004b80:	4801      	ldr	r0, [pc, #4]	@ (8004b88 <__malloc_lock+0x8>)
 8004b82:	f7ff bf01 	b.w	8004988 <__retarget_lock_acquire_recursive>
 8004b86:	bf00      	nop
 8004b88:	200004f4 	.word	0x200004f4

08004b8c <__malloc_unlock>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	@ (8004b94 <__malloc_unlock+0x8>)
 8004b8e:	f7ff befc 	b.w	800498a <__retarget_lock_release_recursive>
 8004b92:	bf00      	nop
 8004b94:	200004f4 	.word	0x200004f4

08004b98 <__ssputs_r>:
 8004b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	688e      	ldr	r6, [r1, #8]
 8004b9e:	461f      	mov	r7, r3
 8004ba0:	42be      	cmp	r6, r7
 8004ba2:	680b      	ldr	r3, [r1, #0]
 8004ba4:	4682      	mov	sl, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	4690      	mov	r8, r2
 8004baa:	d82d      	bhi.n	8004c08 <__ssputs_r+0x70>
 8004bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004bb4:	d026      	beq.n	8004c04 <__ssputs_r+0x6c>
 8004bb6:	6965      	ldr	r5, [r4, #20]
 8004bb8:	6909      	ldr	r1, [r1, #16]
 8004bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bbe:	eba3 0901 	sub.w	r9, r3, r1
 8004bc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bc6:	1c7b      	adds	r3, r7, #1
 8004bc8:	444b      	add	r3, r9
 8004bca:	106d      	asrs	r5, r5, #1
 8004bcc:	429d      	cmp	r5, r3
 8004bce:	bf38      	it	cc
 8004bd0:	461d      	movcc	r5, r3
 8004bd2:	0553      	lsls	r3, r2, #21
 8004bd4:	d527      	bpl.n	8004c26 <__ssputs_r+0x8e>
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7ff ff52 	bl	8004a80 <_malloc_r>
 8004bdc:	4606      	mov	r6, r0
 8004bde:	b360      	cbz	r0, 8004c3a <__ssputs_r+0xa2>
 8004be0:	6921      	ldr	r1, [r4, #16]
 8004be2:	464a      	mov	r2, r9
 8004be4:	f7ff fed2 	bl	800498c <memcpy>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	6126      	str	r6, [r4, #16]
 8004bf6:	6165      	str	r5, [r4, #20]
 8004bf8:	444e      	add	r6, r9
 8004bfa:	eba5 0509 	sub.w	r5, r5, r9
 8004bfe:	6026      	str	r6, [r4, #0]
 8004c00:	60a5      	str	r5, [r4, #8]
 8004c02:	463e      	mov	r6, r7
 8004c04:	42be      	cmp	r6, r7
 8004c06:	d900      	bls.n	8004c0a <__ssputs_r+0x72>
 8004c08:	463e      	mov	r6, r7
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	4641      	mov	r1, r8
 8004c10:	f000 faa6 	bl	8005160 <memmove>
 8004c14:	68a3      	ldr	r3, [r4, #8]
 8004c16:	1b9b      	subs	r3, r3, r6
 8004c18:	60a3      	str	r3, [r4, #8]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	4433      	add	r3, r6
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	2000      	movs	r0, #0
 8004c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c26:	462a      	mov	r2, r5
 8004c28:	f000 fac4 	bl	80051b4 <_realloc_r>
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d1e0      	bne.n	8004bf4 <__ssputs_r+0x5c>
 8004c32:	6921      	ldr	r1, [r4, #16]
 8004c34:	4650      	mov	r0, sl
 8004c36:	f7ff feb7 	bl	80049a8 <_free_r>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	f8ca 3000 	str.w	r3, [sl]
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	e7e9      	b.n	8004c22 <__ssputs_r+0x8a>
	...

08004c50 <_svfiprintf_r>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	4698      	mov	r8, r3
 8004c56:	898b      	ldrh	r3, [r1, #12]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	b09d      	sub	sp, #116	@ 0x74
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	4614      	mov	r4, r2
 8004c62:	d510      	bpl.n	8004c86 <_svfiprintf_r+0x36>
 8004c64:	690b      	ldr	r3, [r1, #16]
 8004c66:	b973      	cbnz	r3, 8004c86 <_svfiprintf_r+0x36>
 8004c68:	2140      	movs	r1, #64	@ 0x40
 8004c6a:	f7ff ff09 	bl	8004a80 <_malloc_r>
 8004c6e:	6028      	str	r0, [r5, #0]
 8004c70:	6128      	str	r0, [r5, #16]
 8004c72:	b930      	cbnz	r0, 8004c82 <_svfiprintf_r+0x32>
 8004c74:	230c      	movs	r3, #12
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	b01d      	add	sp, #116	@ 0x74
 8004c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c82:	2340      	movs	r3, #64	@ 0x40
 8004c84:	616b      	str	r3, [r5, #20]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c94:	2330      	movs	r3, #48	@ 0x30
 8004c96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e34 <_svfiprintf_r+0x1e4>
 8004c9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c9e:	f04f 0901 	mov.w	r9, #1
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	469a      	mov	sl, r3
 8004ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004caa:	b10a      	cbz	r2, 8004cb0 <_svfiprintf_r+0x60>
 8004cac:	2a25      	cmp	r2, #37	@ 0x25
 8004cae:	d1f9      	bne.n	8004ca4 <_svfiprintf_r+0x54>
 8004cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8004cb4:	d00b      	beq.n	8004cce <_svfiprintf_r+0x7e>
 8004cb6:	465b      	mov	r3, fp
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4629      	mov	r1, r5
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	f7ff ff6b 	bl	8004b98 <__ssputs_r>
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f000 80a7 	beq.w	8004e16 <_svfiprintf_r+0x1c6>
 8004cc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cca:	445a      	add	r2, fp
 8004ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cce:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 809f 	beq.w	8004e16 <_svfiprintf_r+0x1c6>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce2:	f10a 0a01 	add.w	sl, sl, #1
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	9307      	str	r3, [sp, #28]
 8004cea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cf0:	4654      	mov	r4, sl
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf8:	484e      	ldr	r0, [pc, #312]	@ (8004e34 <_svfiprintf_r+0x1e4>)
 8004cfa:	f7fb fa69 	bl	80001d0 <memchr>
 8004cfe:	9a04      	ldr	r2, [sp, #16]
 8004d00:	b9d8      	cbnz	r0, 8004d3a <_svfiprintf_r+0xea>
 8004d02:	06d0      	lsls	r0, r2, #27
 8004d04:	bf44      	itt	mi
 8004d06:	2320      	movmi	r3, #32
 8004d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d0c:	0711      	lsls	r1, r2, #28
 8004d0e:	bf44      	itt	mi
 8004d10:	232b      	movmi	r3, #43	@ 0x2b
 8004d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d16:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d1c:	d015      	beq.n	8004d4a <_svfiprintf_r+0xfa>
 8004d1e:	9a07      	ldr	r2, [sp, #28]
 8004d20:	4654      	mov	r4, sl
 8004d22:	2000      	movs	r0, #0
 8004d24:	f04f 0c0a 	mov.w	ip, #10
 8004d28:	4621      	mov	r1, r4
 8004d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d2e:	3b30      	subs	r3, #48	@ 0x30
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	d94b      	bls.n	8004dcc <_svfiprintf_r+0x17c>
 8004d34:	b1b0      	cbz	r0, 8004d64 <_svfiprintf_r+0x114>
 8004d36:	9207      	str	r2, [sp, #28]
 8004d38:	e014      	b.n	8004d64 <_svfiprintf_r+0x114>
 8004d3a:	eba0 0308 	sub.w	r3, r0, r8
 8004d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d42:	4313      	orrs	r3, r2
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	46a2      	mov	sl, r4
 8004d48:	e7d2      	b.n	8004cf0 <_svfiprintf_r+0xa0>
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	1d19      	adds	r1, r3, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	9103      	str	r1, [sp, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfbb      	ittet	lt
 8004d56:	425b      	neglt	r3, r3
 8004d58:	f042 0202 	orrlt.w	r2, r2, #2
 8004d5c:	9307      	strge	r3, [sp, #28]
 8004d5e:	9307      	strlt	r3, [sp, #28]
 8004d60:	bfb8      	it	lt
 8004d62:	9204      	strlt	r2, [sp, #16]
 8004d64:	7823      	ldrb	r3, [r4, #0]
 8004d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d68:	d10a      	bne.n	8004d80 <_svfiprintf_r+0x130>
 8004d6a:	7863      	ldrb	r3, [r4, #1]
 8004d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d6e:	d132      	bne.n	8004dd6 <_svfiprintf_r+0x186>
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	9203      	str	r2, [sp, #12]
 8004d78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d7c:	3402      	adds	r4, #2
 8004d7e:	9305      	str	r3, [sp, #20]
 8004d80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e44 <_svfiprintf_r+0x1f4>
 8004d84:	7821      	ldrb	r1, [r4, #0]
 8004d86:	2203      	movs	r2, #3
 8004d88:	4650      	mov	r0, sl
 8004d8a:	f7fb fa21 	bl	80001d0 <memchr>
 8004d8e:	b138      	cbz	r0, 8004da0 <_svfiprintf_r+0x150>
 8004d90:	9b04      	ldr	r3, [sp, #16]
 8004d92:	eba0 000a 	sub.w	r0, r0, sl
 8004d96:	2240      	movs	r2, #64	@ 0x40
 8004d98:	4082      	lsls	r2, r0
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	3401      	adds	r4, #1
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da4:	4824      	ldr	r0, [pc, #144]	@ (8004e38 <_svfiprintf_r+0x1e8>)
 8004da6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004daa:	2206      	movs	r2, #6
 8004dac:	f7fb fa10 	bl	80001d0 <memchr>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d036      	beq.n	8004e22 <_svfiprintf_r+0x1d2>
 8004db4:	4b21      	ldr	r3, [pc, #132]	@ (8004e3c <_svfiprintf_r+0x1ec>)
 8004db6:	bb1b      	cbnz	r3, 8004e00 <_svfiprintf_r+0x1b0>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	3307      	adds	r3, #7
 8004dbc:	f023 0307 	bic.w	r3, r3, #7
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc6:	4433      	add	r3, r6
 8004dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dca:	e76a      	b.n	8004ca2 <_svfiprintf_r+0x52>
 8004dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	e7a8      	b.n	8004d28 <_svfiprintf_r+0xd8>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	3401      	adds	r4, #1
 8004dda:	9305      	str	r3, [sp, #20]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f04f 0c0a 	mov.w	ip, #10
 8004de2:	4620      	mov	r0, r4
 8004de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de8:	3a30      	subs	r2, #48	@ 0x30
 8004dea:	2a09      	cmp	r2, #9
 8004dec:	d903      	bls.n	8004df6 <_svfiprintf_r+0x1a6>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0c6      	beq.n	8004d80 <_svfiprintf_r+0x130>
 8004df2:	9105      	str	r1, [sp, #20]
 8004df4:	e7c4      	b.n	8004d80 <_svfiprintf_r+0x130>
 8004df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e7f0      	b.n	8004de2 <_svfiprintf_r+0x192>
 8004e00:	ab03      	add	r3, sp, #12
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	462a      	mov	r2, r5
 8004e06:	4b0e      	ldr	r3, [pc, #56]	@ (8004e40 <_svfiprintf_r+0x1f0>)
 8004e08:	a904      	add	r1, sp, #16
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f3af 8000 	nop.w
 8004e10:	1c42      	adds	r2, r0, #1
 8004e12:	4606      	mov	r6, r0
 8004e14:	d1d6      	bne.n	8004dc4 <_svfiprintf_r+0x174>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	065b      	lsls	r3, r3, #25
 8004e1a:	f53f af2d 	bmi.w	8004c78 <_svfiprintf_r+0x28>
 8004e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e20:	e72c      	b.n	8004c7c <_svfiprintf_r+0x2c>
 8004e22:	ab03      	add	r3, sp, #12
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	462a      	mov	r2, r5
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <_svfiprintf_r+0x1f0>)
 8004e2a:	a904      	add	r1, sp, #16
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f000 f879 	bl	8004f24 <_printf_i>
 8004e32:	e7ed      	b.n	8004e10 <_svfiprintf_r+0x1c0>
 8004e34:	08005328 	.word	0x08005328
 8004e38:	08005332 	.word	0x08005332
 8004e3c:	00000000 	.word	0x00000000
 8004e40:	08004b99 	.word	0x08004b99
 8004e44:	0800532e 	.word	0x0800532e

08004e48 <_printf_common>:
 8004e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	4616      	mov	r6, r2
 8004e4e:	4698      	mov	r8, r3
 8004e50:	688a      	ldr	r2, [r1, #8]
 8004e52:	690b      	ldr	r3, [r1, #16]
 8004e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	bfb8      	it	lt
 8004e5c:	4613      	movlt	r3, r2
 8004e5e:	6033      	str	r3, [r6, #0]
 8004e60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e64:	4607      	mov	r7, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	b10a      	cbz	r2, 8004e6e <_printf_common+0x26>
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	6033      	str	r3, [r6, #0]
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	0699      	lsls	r1, r3, #26
 8004e72:	bf42      	ittt	mi
 8004e74:	6833      	ldrmi	r3, [r6, #0]
 8004e76:	3302      	addmi	r3, #2
 8004e78:	6033      	strmi	r3, [r6, #0]
 8004e7a:	6825      	ldr	r5, [r4, #0]
 8004e7c:	f015 0506 	ands.w	r5, r5, #6
 8004e80:	d106      	bne.n	8004e90 <_printf_common+0x48>
 8004e82:	f104 0a19 	add.w	sl, r4, #25
 8004e86:	68e3      	ldr	r3, [r4, #12]
 8004e88:	6832      	ldr	r2, [r6, #0]
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	42ab      	cmp	r3, r5
 8004e8e:	dc26      	bgt.n	8004ede <_printf_common+0x96>
 8004e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	3b00      	subs	r3, #0
 8004e98:	bf18      	it	ne
 8004e9a:	2301      	movne	r3, #1
 8004e9c:	0692      	lsls	r2, r2, #26
 8004e9e:	d42b      	bmi.n	8004ef8 <_printf_common+0xb0>
 8004ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c8      	blx	r9
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d01e      	beq.n	8004eec <_printf_common+0xa4>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	6922      	ldr	r2, [r4, #16]
 8004eb2:	f003 0306 	and.w	r3, r3, #6
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	bf02      	ittt	eq
 8004eba:	68e5      	ldreq	r5, [r4, #12]
 8004ebc:	6833      	ldreq	r3, [r6, #0]
 8004ebe:	1aed      	subeq	r5, r5, r3
 8004ec0:	68a3      	ldr	r3, [r4, #8]
 8004ec2:	bf0c      	ite	eq
 8004ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec8:	2500      	movne	r5, #0
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	bfc4      	itt	gt
 8004ece:	1a9b      	subgt	r3, r3, r2
 8004ed0:	18ed      	addgt	r5, r5, r3
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	341a      	adds	r4, #26
 8004ed6:	42b5      	cmp	r5, r6
 8004ed8:	d11a      	bne.n	8004f10 <_printf_common+0xc8>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e008      	b.n	8004ef0 <_printf_common+0xa8>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4652      	mov	r2, sl
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	47c8      	blx	r9
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d103      	bne.n	8004ef4 <_printf_common+0xac>
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	e7c6      	b.n	8004e86 <_printf_common+0x3e>
 8004ef8:	18e1      	adds	r1, r4, r3
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	2030      	movs	r0, #48	@ 0x30
 8004efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f02:	4422      	add	r2, r4
 8004f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	e7c7      	b.n	8004ea0 <_printf_common+0x58>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4622      	mov	r2, r4
 8004f14:	4641      	mov	r1, r8
 8004f16:	4638      	mov	r0, r7
 8004f18:	47c8      	blx	r9
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d0e6      	beq.n	8004eec <_printf_common+0xa4>
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7d9      	b.n	8004ed6 <_printf_common+0x8e>
	...

08004f24 <_printf_i>:
 8004f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	7e0f      	ldrb	r7, [r1, #24]
 8004f2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f2c:	2f78      	cmp	r7, #120	@ 0x78
 8004f2e:	4691      	mov	r9, r2
 8004f30:	4680      	mov	r8, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	469a      	mov	sl, r3
 8004f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f3a:	d807      	bhi.n	8004f4c <_printf_i+0x28>
 8004f3c:	2f62      	cmp	r7, #98	@ 0x62
 8004f3e:	d80a      	bhi.n	8004f56 <_printf_i+0x32>
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	f000 80d1 	beq.w	80050e8 <_printf_i+0x1c4>
 8004f46:	2f58      	cmp	r7, #88	@ 0x58
 8004f48:	f000 80b8 	beq.w	80050bc <_printf_i+0x198>
 8004f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f54:	e03a      	b.n	8004fcc <_printf_i+0xa8>
 8004f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f5a:	2b15      	cmp	r3, #21
 8004f5c:	d8f6      	bhi.n	8004f4c <_printf_i+0x28>
 8004f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f64 <_printf_i+0x40>)
 8004f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	08004fd1 	.word	0x08004fd1
 8004f6c:	08004f4d 	.word	0x08004f4d
 8004f70:	08004f4d 	.word	0x08004f4d
 8004f74:	08004f4d 	.word	0x08004f4d
 8004f78:	08004f4d 	.word	0x08004f4d
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08004f4d 	.word	0x08004f4d
 8004f84:	08004f4d 	.word	0x08004f4d
 8004f88:	08004f4d 	.word	0x08004f4d
 8004f8c:	08004f4d 	.word	0x08004f4d
 8004f90:	080050cf 	.word	0x080050cf
 8004f94:	08004ffb 	.word	0x08004ffb
 8004f98:	08005089 	.word	0x08005089
 8004f9c:	08004f4d 	.word	0x08004f4d
 8004fa0:	08004f4d 	.word	0x08004f4d
 8004fa4:	080050f1 	.word	0x080050f1
 8004fa8:	08004f4d 	.word	0x08004f4d
 8004fac:	08004ffb 	.word	0x08004ffb
 8004fb0:	08004f4d 	.word	0x08004f4d
 8004fb4:	08004f4d 	.word	0x08004f4d
 8004fb8:	08005091 	.word	0x08005091
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6032      	str	r2, [r6, #0]
 8004fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e09c      	b.n	800510a <_printf_i+0x1e6>
 8004fd0:	6833      	ldr	r3, [r6, #0]
 8004fd2:	6820      	ldr	r0, [r4, #0]
 8004fd4:	1d19      	adds	r1, r3, #4
 8004fd6:	6031      	str	r1, [r6, #0]
 8004fd8:	0606      	lsls	r6, r0, #24
 8004fda:	d501      	bpl.n	8004fe0 <_printf_i+0xbc>
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	e003      	b.n	8004fe8 <_printf_i+0xc4>
 8004fe0:	0645      	lsls	r5, r0, #25
 8004fe2:	d5fb      	bpl.n	8004fdc <_printf_i+0xb8>
 8004fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	da03      	bge.n	8004ff4 <_printf_i+0xd0>
 8004fec:	232d      	movs	r3, #45	@ 0x2d
 8004fee:	426d      	negs	r5, r5
 8004ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ff4:	4858      	ldr	r0, [pc, #352]	@ (8005158 <_printf_i+0x234>)
 8004ff6:	230a      	movs	r3, #10
 8004ff8:	e011      	b.n	800501e <_printf_i+0xfa>
 8004ffa:	6821      	ldr	r1, [r4, #0]
 8004ffc:	6833      	ldr	r3, [r6, #0]
 8004ffe:	0608      	lsls	r0, r1, #24
 8005000:	f853 5b04 	ldr.w	r5, [r3], #4
 8005004:	d402      	bmi.n	800500c <_printf_i+0xe8>
 8005006:	0649      	lsls	r1, r1, #25
 8005008:	bf48      	it	mi
 800500a:	b2ad      	uxthmi	r5, r5
 800500c:	2f6f      	cmp	r7, #111	@ 0x6f
 800500e:	4852      	ldr	r0, [pc, #328]	@ (8005158 <_printf_i+0x234>)
 8005010:	6033      	str	r3, [r6, #0]
 8005012:	bf14      	ite	ne
 8005014:	230a      	movne	r3, #10
 8005016:	2308      	moveq	r3, #8
 8005018:	2100      	movs	r1, #0
 800501a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800501e:	6866      	ldr	r6, [r4, #4]
 8005020:	60a6      	str	r6, [r4, #8]
 8005022:	2e00      	cmp	r6, #0
 8005024:	db05      	blt.n	8005032 <_printf_i+0x10e>
 8005026:	6821      	ldr	r1, [r4, #0]
 8005028:	432e      	orrs	r6, r5
 800502a:	f021 0104 	bic.w	r1, r1, #4
 800502e:	6021      	str	r1, [r4, #0]
 8005030:	d04b      	beq.n	80050ca <_printf_i+0x1a6>
 8005032:	4616      	mov	r6, r2
 8005034:	fbb5 f1f3 	udiv	r1, r5, r3
 8005038:	fb03 5711 	mls	r7, r3, r1, r5
 800503c:	5dc7      	ldrb	r7, [r0, r7]
 800503e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005042:	462f      	mov	r7, r5
 8005044:	42bb      	cmp	r3, r7
 8005046:	460d      	mov	r5, r1
 8005048:	d9f4      	bls.n	8005034 <_printf_i+0x110>
 800504a:	2b08      	cmp	r3, #8
 800504c:	d10b      	bne.n	8005066 <_printf_i+0x142>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	07df      	lsls	r7, r3, #31
 8005052:	d508      	bpl.n	8005066 <_printf_i+0x142>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	6861      	ldr	r1, [r4, #4]
 8005058:	4299      	cmp	r1, r3
 800505a:	bfde      	ittt	le
 800505c:	2330      	movle	r3, #48	@ 0x30
 800505e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005062:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005066:	1b92      	subs	r2, r2, r6
 8005068:	6122      	str	r2, [r4, #16]
 800506a:	f8cd a000 	str.w	sl, [sp]
 800506e:	464b      	mov	r3, r9
 8005070:	aa03      	add	r2, sp, #12
 8005072:	4621      	mov	r1, r4
 8005074:	4640      	mov	r0, r8
 8005076:	f7ff fee7 	bl	8004e48 <_printf_common>
 800507a:	3001      	adds	r0, #1
 800507c:	d14a      	bne.n	8005114 <_printf_i+0x1f0>
 800507e:	f04f 30ff 	mov.w	r0, #4294967295
 8005082:	b004      	add	sp, #16
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	f043 0320 	orr.w	r3, r3, #32
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	4832      	ldr	r0, [pc, #200]	@ (800515c <_printf_i+0x238>)
 8005092:	2778      	movs	r7, #120	@ 0x78
 8005094:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	6831      	ldr	r1, [r6, #0]
 800509c:	061f      	lsls	r7, r3, #24
 800509e:	f851 5b04 	ldr.w	r5, [r1], #4
 80050a2:	d402      	bmi.n	80050aa <_printf_i+0x186>
 80050a4:	065f      	lsls	r7, r3, #25
 80050a6:	bf48      	it	mi
 80050a8:	b2ad      	uxthmi	r5, r5
 80050aa:	6031      	str	r1, [r6, #0]
 80050ac:	07d9      	lsls	r1, r3, #31
 80050ae:	bf44      	itt	mi
 80050b0:	f043 0320 	orrmi.w	r3, r3, #32
 80050b4:	6023      	strmi	r3, [r4, #0]
 80050b6:	b11d      	cbz	r5, 80050c0 <_printf_i+0x19c>
 80050b8:	2310      	movs	r3, #16
 80050ba:	e7ad      	b.n	8005018 <_printf_i+0xf4>
 80050bc:	4826      	ldr	r0, [pc, #152]	@ (8005158 <_printf_i+0x234>)
 80050be:	e7e9      	b.n	8005094 <_printf_i+0x170>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	f023 0320 	bic.w	r3, r3, #32
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	e7f6      	b.n	80050b8 <_printf_i+0x194>
 80050ca:	4616      	mov	r6, r2
 80050cc:	e7bd      	b.n	800504a <_printf_i+0x126>
 80050ce:	6833      	ldr	r3, [r6, #0]
 80050d0:	6825      	ldr	r5, [r4, #0]
 80050d2:	6961      	ldr	r1, [r4, #20]
 80050d4:	1d18      	adds	r0, r3, #4
 80050d6:	6030      	str	r0, [r6, #0]
 80050d8:	062e      	lsls	r6, r5, #24
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	d501      	bpl.n	80050e2 <_printf_i+0x1be>
 80050de:	6019      	str	r1, [r3, #0]
 80050e0:	e002      	b.n	80050e8 <_printf_i+0x1c4>
 80050e2:	0668      	lsls	r0, r5, #25
 80050e4:	d5fb      	bpl.n	80050de <_printf_i+0x1ba>
 80050e6:	8019      	strh	r1, [r3, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	4616      	mov	r6, r2
 80050ee:	e7bc      	b.n	800506a <_printf_i+0x146>
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	6032      	str	r2, [r6, #0]
 80050f6:	681e      	ldr	r6, [r3, #0]
 80050f8:	6862      	ldr	r2, [r4, #4]
 80050fa:	2100      	movs	r1, #0
 80050fc:	4630      	mov	r0, r6
 80050fe:	f7fb f867 	bl	80001d0 <memchr>
 8005102:	b108      	cbz	r0, 8005108 <_printf_i+0x1e4>
 8005104:	1b80      	subs	r0, r0, r6
 8005106:	6060      	str	r0, [r4, #4]
 8005108:	6863      	ldr	r3, [r4, #4]
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	2300      	movs	r3, #0
 800510e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005112:	e7aa      	b.n	800506a <_printf_i+0x146>
 8005114:	6923      	ldr	r3, [r4, #16]
 8005116:	4632      	mov	r2, r6
 8005118:	4649      	mov	r1, r9
 800511a:	4640      	mov	r0, r8
 800511c:	47d0      	blx	sl
 800511e:	3001      	adds	r0, #1
 8005120:	d0ad      	beq.n	800507e <_printf_i+0x15a>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	079b      	lsls	r3, r3, #30
 8005126:	d413      	bmi.n	8005150 <_printf_i+0x22c>
 8005128:	68e0      	ldr	r0, [r4, #12]
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	4298      	cmp	r0, r3
 800512e:	bfb8      	it	lt
 8005130:	4618      	movlt	r0, r3
 8005132:	e7a6      	b.n	8005082 <_printf_i+0x15e>
 8005134:	2301      	movs	r3, #1
 8005136:	4632      	mov	r2, r6
 8005138:	4649      	mov	r1, r9
 800513a:	4640      	mov	r0, r8
 800513c:	47d0      	blx	sl
 800513e:	3001      	adds	r0, #1
 8005140:	d09d      	beq.n	800507e <_printf_i+0x15a>
 8005142:	3501      	adds	r5, #1
 8005144:	68e3      	ldr	r3, [r4, #12]
 8005146:	9903      	ldr	r1, [sp, #12]
 8005148:	1a5b      	subs	r3, r3, r1
 800514a:	42ab      	cmp	r3, r5
 800514c:	dcf2      	bgt.n	8005134 <_printf_i+0x210>
 800514e:	e7eb      	b.n	8005128 <_printf_i+0x204>
 8005150:	2500      	movs	r5, #0
 8005152:	f104 0619 	add.w	r6, r4, #25
 8005156:	e7f5      	b.n	8005144 <_printf_i+0x220>
 8005158:	08005339 	.word	0x08005339
 800515c:	0800534a 	.word	0x0800534a

08005160 <memmove>:
 8005160:	4288      	cmp	r0, r1
 8005162:	b510      	push	{r4, lr}
 8005164:	eb01 0402 	add.w	r4, r1, r2
 8005168:	d902      	bls.n	8005170 <memmove+0x10>
 800516a:	4284      	cmp	r4, r0
 800516c:	4623      	mov	r3, r4
 800516e:	d807      	bhi.n	8005180 <memmove+0x20>
 8005170:	1e43      	subs	r3, r0, #1
 8005172:	42a1      	cmp	r1, r4
 8005174:	d008      	beq.n	8005188 <memmove+0x28>
 8005176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800517a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800517e:	e7f8      	b.n	8005172 <memmove+0x12>
 8005180:	4402      	add	r2, r0
 8005182:	4601      	mov	r1, r0
 8005184:	428a      	cmp	r2, r1
 8005186:	d100      	bne.n	800518a <memmove+0x2a>
 8005188:	bd10      	pop	{r4, pc}
 800518a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800518e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005192:	e7f7      	b.n	8005184 <memmove+0x24>

08005194 <_sbrk_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d06      	ldr	r5, [pc, #24]	@ (80051b0 <_sbrk_r+0x1c>)
 8005198:	2300      	movs	r3, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	602b      	str	r3, [r5, #0]
 80051a0:	f7fc fdd4 	bl	8001d4c <_sbrk>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	d102      	bne.n	80051ae <_sbrk_r+0x1a>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b103      	cbz	r3, 80051ae <_sbrk_r+0x1a>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	200004f0 	.word	0x200004f0

080051b4 <_realloc_r>:
 80051b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b8:	4607      	mov	r7, r0
 80051ba:	4614      	mov	r4, r2
 80051bc:	460d      	mov	r5, r1
 80051be:	b921      	cbnz	r1, 80051ca <_realloc_r+0x16>
 80051c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c4:	4611      	mov	r1, r2
 80051c6:	f7ff bc5b 	b.w	8004a80 <_malloc_r>
 80051ca:	b92a      	cbnz	r2, 80051d8 <_realloc_r+0x24>
 80051cc:	f7ff fbec 	bl	80049a8 <_free_r>
 80051d0:	4625      	mov	r5, r4
 80051d2:	4628      	mov	r0, r5
 80051d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d8:	f000 f81a 	bl	8005210 <_malloc_usable_size_r>
 80051dc:	4284      	cmp	r4, r0
 80051de:	4606      	mov	r6, r0
 80051e0:	d802      	bhi.n	80051e8 <_realloc_r+0x34>
 80051e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051e6:	d8f4      	bhi.n	80051d2 <_realloc_r+0x1e>
 80051e8:	4621      	mov	r1, r4
 80051ea:	4638      	mov	r0, r7
 80051ec:	f7ff fc48 	bl	8004a80 <_malloc_r>
 80051f0:	4680      	mov	r8, r0
 80051f2:	b908      	cbnz	r0, 80051f8 <_realloc_r+0x44>
 80051f4:	4645      	mov	r5, r8
 80051f6:	e7ec      	b.n	80051d2 <_realloc_r+0x1e>
 80051f8:	42b4      	cmp	r4, r6
 80051fa:	4622      	mov	r2, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	bf28      	it	cs
 8005200:	4632      	movcs	r2, r6
 8005202:	f7ff fbc3 	bl	800498c <memcpy>
 8005206:	4629      	mov	r1, r5
 8005208:	4638      	mov	r0, r7
 800520a:	f7ff fbcd 	bl	80049a8 <_free_r>
 800520e:	e7f1      	b.n	80051f4 <_realloc_r+0x40>

08005210 <_malloc_usable_size_r>:
 8005210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005214:	1f18      	subs	r0, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfbc      	itt	lt
 800521a:	580b      	ldrlt	r3, [r1, r0]
 800521c:	18c0      	addlt	r0, r0, r3
 800521e:	4770      	bx	lr

08005220 <_init>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	bf00      	nop
 8005224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005226:	bc08      	pop	{r3}
 8005228:	469e      	mov	lr, r3
 800522a:	4770      	bx	lr

0800522c <_fini>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr
